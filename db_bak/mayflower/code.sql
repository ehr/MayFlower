# --------------------------------------------------------
# Host:                         localhost
# Server version:               5.5.8
# Server OS:                    Win32
# HeidiSQL version:             6.0.0.3603
# Date/time:                    2011-05-19 09:38:55
# --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

# Dumping structure for table mayflower.code
DROP TABLE IF EXISTS `code`;
CREATE TABLE IF NOT EXISTS `code` (
  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `TITLE` varchar(45) DEFAULT NULL COMMENT '代码标题',
  `AUTHOR` varchar(45) DEFAULT NULL COMMENT '发布人',
  `CREATE_DATE` datetime DEFAULT NULL COMMENT '发布时间',
  `LASTMODIFY_DATE` datetime DEFAULT NULL COMMENT '最后修改时间',
  `CONTENT` longtext COMMENT '代码段',
  `TAG` varchar(45) DEFAULT NULL COMMENT '标签',
  `LANGUAGE` varchar(45) DEFAULT NULL COMMENT '语言',
  `HITS` int(10) unsigned DEFAULT '1' COMMENT '点击数',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=120 DEFAULT CHARSET=utf8;

# Dumping data for table mayflower.code: ~84 rows (approximately)
DELETE FROM `code`;
/*!40000 ALTER TABLE `code` DISABLE KEYS */;
INSERT INTO `code` (`ID`, `TITLE`, `AUTHOR`, `CREATE_DATE`, `LASTMODIFY_DATE`, `CONTENT`, `TAG`, `LANGUAGE`, `HITS`) VALUES
	(82, 'SCALA MP3播放器', 'erhu', '2011-01-24 18:42:32', '2011-04-26 13:40:11', 'import javazoom.jl.player.FactoryRegistry\r\nimport actors.Actor\r\nimport scala.actors.Actor._\r\nimport swing.SimpleSwingApplication\r\nimport swing._\r\nimport java.io.{FileInputStream, InputStream}\r\nimport swing.event._\r\nimport javazoom.jl.decoder.{SampleBuffer, Decoder, Bitstream}\r\nimport java.util.Arrays\r\n\r\n\r\n/**\r\n * Created by IntelliJ IDEA.\r\n * User: Administrator\r\n * Date: 2010-12-26\r\n * Time: 10:17:35\r\n * 我们自己的播放器 ;这个例子需要使用javazoom类库。实现的是Actor的通信，进行暂停控制。\r\n */\r\n\r\nclass Player(var stream: InputStream) extends Actor {\r\n    val bitstream = new Bitstream(stream)\r\n    val decoder = new Decoder\r\n    val audio = FactoryRegistry.systemRegistry.createAudioDevice\r\n\r\n    var closed = false\r\n    var complete = false\r\n    var lastPosition = 0\r\n    var paused = false\r\n    var frames = 0\r\n\r\n    audio.open(decoder)\r\n\r\n    println(audio.isOpen)\r\n\r\n    def act() {\r\n        play\r\n    }\r\n\r\n    def close: Unit = {\r\n        audio.close\r\n        lastPosition = audio.getPosition\r\n        bitstream.close\r\n    }\r\n\r\n    def play {\r\n        var ret = true\r\n        while (ret) {\r\n            if (paused) {\r\n                println("paused")\r\n                Thread.sleep(100)\r\n            } else {\r\n                ret = decodeFrame\r\n                frames =  + 1\r\n                //println(frames)\r\n            }\r\n        }\r\n        if (!ret) {\r\n            audio.flush\r\n            close\r\n        }\r\n    }\r\n\r\n    def decodeFrame: Boolean = {\r\n        try {\r\n            val h = bitstream.readFrame\r\n            val output = decoder.decodeFrame(h, bitstream).asInstanceOf[SampleBuffer]\r\n            //println("output:" + Arrays.toString(output.getBuffer))\r\n            audio.write(output.getBuffer, 0, output.getBufferLength)\r\n            //println("decoding...")\r\n            bitstream.closeFrame\r\n            true\r\n        } catch {\r\n            case e: Exception =>\r\n                e.printStackTrace\r\n                return false\r\n        }\r\n    }\r\n}\r\n\r\nobject Player extends SimpleSwingApplication {\r\n    val test = new FileInputStream("d:/hero.mp3")\r\n\r\n    val myplay = new Player(test)\r\n\r\n    val controler = actor {\r\n        loop {\r\n            react {\r\n                case "play" =>\r\n                    if (myplay.paused) {\r\n                        myplay.paused = false\r\n                    }\r\n                    else {\r\n                        myplay.start\r\n                    }\r\n                case "pause" => myplay.paused = true\r\n            }\r\n        }\r\n    }\r\n\r\n    controler.start\r\n\r\n    val play = new Button {\r\n        text = "play"\r\n    }\r\n\r\n    val pause = new Button {\r\n        text = "pause"\r\n    }\r\n\r\n    val mainpanel = new FlowPanel {\r\n        contents ++ Array(play, pause)\r\n    }\r\n\r\n    def top = new MainFrame {\r\n        title = "my player"\r\n        contents = mainpanel\r\n    }\r\n\r\n    listenTo(play, pause)\r\n    reactions += {\r\n        case ButtonClicked(b) => b.text match {\r\n            case "play" => controler ! "play"\r\n            case "pause" => controler ! "pause"\r\n        }\r\n    }\r\n}', 'scala', 'scala', 3),
	(84, '一个伴随已久的时间操作工具类', 'erhu', '2011-01-24 18:46:39', NULL, 'package com.***.product.util;1\r\n \r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.GregorianCalendar;\r\nimport java.util.regex.Pattern;\r\n \r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n \r\n \r\npublic class DateUtil {\r\n    protected static Log logger = LogFactory.getLog(DateUtil.class);\r\n \r\n    // 格式：年－月－日 小时：分钟：秒\r\n    public static final String FORMAT_ONE = "yyyy-MM-dd HH:mm:ss";\r\n \r\n    // 格式：年－月－日 小时：分钟\r\n    public static final String FORMAT_TWO = "yyyy-MM-dd HH:mm";\r\n \r\n    // 格式：年月日 小时分钟秒\r\n    public static final String FORMAT_THREE = "yyyyMMdd-HHmmss";\r\n \r\n    // 格式：年－月－日\r\n    public static final String LONG_DATE_FORMAT = "yyyy-MM-dd";\r\n \r\n    // 格式：月－日\r\n    public static final String SHORT_DATE_FORMAT = "MM-dd";\r\n \r\n    // 格式：小时：分钟：秒\r\n    public static final String LONG_TIME_FORMAT = "HH:mm:ss";\r\n \r\n    //格式：年-月\r\n    public static final String MONTG_DATE_FORMAT = "yyyy-MM";\r\n \r\n    // 年的加减\r\n    public static final int SUB_YEAR = Calendar.YEAR;\r\n \r\n    // 月加减\r\n    public static final int SUB_MONTH = Calendar.MONTH;\r\n \r\n    // 天的加减\r\n    public static final int SUB_DAY = Calendar.DATE;\r\n \r\n    // 小时的加减\r\n    public static final int SUB_HOUR = Calendar.HOUR;\r\n \r\n    // 分钟的加减\r\n    public static final int SUB_MINUTE = Calendar.MINUTE;\r\n \r\n    // 秒的加减\r\n    public static final int SUB_SECOND = Calendar.SECOND;\r\n \r\n    static final String dayNames[] = { "星期日", "星期一", "星期二", "星期三", "星期四",\r\n            "星期五", "星期六" };\r\n \r\n    @SuppressWarnings("unused")\r\n    private static final SimpleDateFormat timeFormat = new SimpleDateFormat(\r\n            "yyyy-MM-dd HH:mm:ss");\r\n \r\n    public DateUtil() {\r\n    }\r\n \r\n    /**\r\n     * 把符合日期格式的字符串转换为日期类型\r\n     *\r\n     * @param dateStr\r\n     * @return\r\n     */\r\n    public static java.util.Date stringtoDate(String dateStr, String format) {\r\n        Date d = null;\r\n        SimpleDateFormat formater = new SimpleDateFormat(format);\r\n        try {\r\n            formater.setLenient(false);\r\n            d = formater.parse(dateStr);\r\n        } catch (Exception e) {\r\n            // log.error(e);\r\n            d = null;\r\n        }\r\n        return d;\r\n    }\r\n \r\n    /**\r\n     * 把符合日期格式的字符串转换为日期类型\r\n     */\r\n    public static java.util.Date stringtoDate(String dateStr, String format,\r\n            ParsePosition pos) {\r\n        Date d = null;\r\n        SimpleDateFormat formater = new SimpleDateFormat(format);\r\n        try {\r\n            formater.setLenient(false);\r\n            d = formater.parse(dateStr, pos);\r\n        } catch (Exception e) {\r\n            d = null;\r\n        }\r\n        return d;\r\n    }\r\n \r\n    /**\r\n     * 把日期转换为字符串\r\n     *\r\n     * @param date\r\n     * @return\r\n     */\r\n    public static String dateToString(java.util.Date date, String format) {\r\n        String result = "";\r\n        SimpleDateFormat formater = new SimpleDateFormat(format);\r\n        try {\r\n            result = formater.format(date);\r\n        } catch (Exception e) {\r\n            // log.error(e);\r\n        }\r\n        return result;\r\n    }\r\n \r\n    /**\r\n     * 获取当前时间的指定格式\r\n     *\r\n     * @param format\r\n     * @return\r\n     */\r\n    public static String getCurrDate(String format) {\r\n        return dateToString(new Date(), format);\r\n    }\r\n \r\n    /**\r\n     *\r\n     * @param dateStr\r\n     * @param amount\r\n     * @return\r\n     */\r\n    public static String dateSub(int dateKind, String dateStr, int amount) {\r\n        Date date = stringtoDate(dateStr, FORMAT_ONE);\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.setTime(date);\r\n        calendar.add(dateKind, amount);\r\n        return dateToString(calendar.getTime(), FORMAT_ONE);\r\n    }\r\n \r\n    /**\r\n     * 两个日期相减\r\n     *\r\n     * @param firstTime\r\n     * @param secTime\r\n     * @return 相减得到的秒数\r\n     */\r\n    public static long timeSub(String firstTime, String secTime) {\r\n        long first = stringtoDate(firstTime, FORMAT_ONE).getTime();\r\n        long second = stringtoDate(secTime, FORMAT_ONE).getTime();\r\n        return (second - first) / 1000;\r\n    }\r\n \r\n    /**\r\n     * 获得某月的天数\r\n     *\r\n     * @param year\r\n     *          int\r\n     * @param month\r\n     *          int\r\n     * @return int\r\n     */\r\n    public static int getDaysOfMonth(String year, String month) {\r\n        int days = 0;\r\n        if (month.equals("1") || month.equals("3") || month.equals("5")\r\n                || month.equals("7") || month.equals("8") || month.equals("10")\r\n                || month.equals("12")) {\r\n            days = 31;\r\n        } else if (month.equals("4") || month.equals("6") || month.equals("9")\r\n                || month.equals("11")) {\r\n            days = 30;\r\n        } else {\r\n            if ((Integer.parseInt(year) % 4 == 0 && Integer.parseInt(year) % 100 != 0)\r\n                    || Integer.parseInt(year) % 400 == 0) {\r\n                days = 29;\r\n            } else {\r\n                days = 28;\r\n            }\r\n        }\r\n \r\n        return days;\r\n    }\r\n \r\n    /**\r\n     * 获取某年某月的天数\r\n     *\r\n     * @param year\r\n     *          int\r\n     * @param month\r\n     *          int 月份[1-12]\r\n     * @return int\r\n     */\r\n    public static int getDaysOfMonth(int year, int month) {\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.set(year, month - 1, 1);\r\n        return calendar.getActualMaximum(Calendar.DAY_OF_MONTH);\r\n    }\r\n \r\n    /**\r\n     * 获得当前日期\r\n     *\r\n     * @return int\r\n     */\r\n    public static int getToday() {\r\n        Calendar calendar = Calendar.getInstance();\r\n        return calendar.get(Calendar.DATE);\r\n    }\r\n \r\n    /**\r\n     * 获得当前月份\r\n     *\r\n     * @return int\r\n     */\r\n    public static int getToMonth() {\r\n        Calendar calendar = Calendar.getInstance();\r\n        return calendar.get(Calendar.MONTH) + 1;\r\n    }\r\n \r\n    /**\r\n     * 获得当前年份\r\n     *\r\n     * @return int\r\n     */\r\n    public static int getToYear() {\r\n        Calendar calendar = Calendar.getInstance();\r\n        return calendar.get(Calendar.YEAR);\r\n    }\r\n \r\n    /**\r\n     * 返回日期的天\r\n     *\r\n     * @param date\r\n     *          Date\r\n     * @return int\r\n     */\r\n    public static int getDay(Date date) {\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.setTime(date);\r\n        return calendar.get(Calendar.DATE);\r\n    }\r\n \r\n    /**\r\n     * 返回日期的年\r\n     *\r\n     * @param date\r\n     *          Date\r\n     * @return int\r\n     */\r\n    public static int getYear(Date date) {\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.setTime(date);\r\n        return calendar.get(Calendar.YEAR);\r\n    }\r\n \r\n    /**\r\n     * 返回日期的月份，1-12\r\n     *\r\n     * @param date\r\n     *          Date\r\n     * @return int\r\n     */\r\n    public static int getMonth(Date date) {\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.setTime(date);\r\n        return calendar.get(Calendar.MONTH) + 1;\r\n    }\r\n \r\n    /**\r\n     * 计算两个日期相差的天数，如果date2 > date1 返回正数，否则返回负数\r\n     *\r\n     * @param date1\r\n     *          Date\r\n     * @param date2\r\n     *          Date\r\n     * @return long\r\n     */\r\n    public static long dayDiff(Date date1, Date date2) {\r\n        return (date2.getTime() - date1.getTime()) / 86400000;\r\n    }\r\n \r\n    /**\r\n     * 比较两个日期的年差\r\n     *\r\n     * @param befor\r\n     * @param after\r\n     * @return\r\n     */\r\n    public static int yearDiff(String before, String after) {\r\n        Date beforeDay = stringtoDate(before, LONG_DATE_FORMAT);\r\n        Date afterDay = stringtoDate(after, LONG_DATE_FORMAT);\r\n        return getYear(afterDay) - getYear(beforeDay);\r\n    }\r\n \r\n    /**\r\n     * 比较指定日期与当前日期的差\r\n     *\r\n     * @param befor\r\n     * @param after\r\n     * @return\r\n     */\r\n    public static int yearDiffCurr(String after) {\r\n        Date beforeDay = new Date();\r\n        Date afterDay = stringtoDate(after, LONG_DATE_FORMAT);\r\n        return getYear(beforeDay) - getYear(afterDay);\r\n    }\r\n \r\n    /**\r\n     * 比较指定日期与当前日期的差\r\n     * @param before\r\n     * @return\r\n     * @author chenyz\r\n     */\r\n    public static long dayDiffCurr(String before) {\r\n        Date currDate = DateUtil.stringtoDate(currDay(), LONG_DATE_FORMAT);\r\n        Date beforeDate = stringtoDate(before, LONG_DATE_FORMAT);\r\n        return (currDate.getTime() - beforeDate.getTime()) / 86400000;\r\n \r\n    }\r\n \r\n    /**\r\n     * 获取每月的第一周\r\n     * @param year\r\n     * @param month\r\n     * @return\r\n     * @author chenyz\r\n     */\r\n    public static int getFirstWeekdayOfMonth(int year, int month) {\r\n        Calendar c = Calendar.getInstance();\r\n        c.setFirstDayOfWeek(Calendar.SATURDAY); // 星期天为第一天\r\n        c.set(year, month - 1, 1);\r\n        return c.get(Calendar.DAY_OF_WEEK);\r\n    }\r\n \r\n    /**\r\n     * 获取每月的最后一周\r\n     * @param year\r\n     * @param month\r\n     * @return\r\n     * @author chenyz\r\n     */\r\n    public static int getLastWeekdayOfMonth(int year, int month) {\r\n        Calendar c = Calendar.getInstance();\r\n        c.setFirstDayOfWeek(Calendar.SATURDAY); // 星期天为第一天\r\n        c.set(year, month - 1, getDaysOfMonth(year, month));\r\n        return c.get(Calendar.DAY_OF_WEEK);\r\n    }\r\n \r\n    /**\r\n     * 获得当前日期字符串，格式"yyyy_MM_dd_HH_mm_ss"\r\n     *\r\n     * @return\r\n     */\r\n    public static String getCurrent() {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(new Date());\r\n        int year = cal.get(Calendar.YEAR);\r\n        int month = cal.get(Calendar.MONTH) + 1;\r\n        int day = cal.get(Calendar.DAY_OF_MONTH);\r\n        int hour = cal.get(Calendar.HOUR_OF_DAY);\r\n        int minute = cal.get(Calendar.MINUTE);\r\n        int second = cal.get(Calendar.SECOND);\r\n        StringBuffer sb = new StringBuffer();\r\n        sb.append(year).append("_").append(StringUtil.addzero(month, 2))\r\n                .append("_").append(StringUtil.addzero(day, 2)).append("_")\r\n                .append(StringUtil.addzero(hour, 2)).append("_").append(\r\n                        StringUtil.addzero(minute, 2)).append("_").append(\r\n                        StringUtil.addzero(second, 2));\r\n        return sb.toString();\r\n    }\r\n \r\n    /**\r\n     * 获得当前日期字符串，格式"yyyy-MM-dd HH:mm:ss"\r\n     *\r\n     * @return\r\n     */\r\n    public static String getNow() {\r\n        Calendar today = Calendar.getInstance();\r\n        return dateToString(today.getTime(), FORMAT_ONE);\r\n    }\r\n \r\n    /**\r\n     * 根据生日获取星座\r\n     *\r\n     * @param birth\r\n     *          YYYY-mm-dd\r\n     * @return\r\n     */\r\n    public static String getAstro(String birth) {\r\n        if (!isDate(birth)) {\r\n            birth = "2000" + birth;\r\n        }\r\n        if (!isDate(birth)) {\r\n            return "";\r\n        }\r\n        int month = Integer.parseInt(birth.substring(birth.indexOf("-") + 1,\r\n                birth.lastIndexOf("-")));\r\n        int day = Integer.parseInt(birth.substring(birth.lastIndexOf("-") + 1));\r\n        String s = "魔羯水瓶双鱼牡羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯";\r\n        int[] arr = { 20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22 };\r\n        int start = month * 2 - (day < arr[month - 1] ? 2 : 0);\r\n        return s.substring(start, start + 2) + "座";\r\n    }\r\n \r\n    /**\r\n     * 判断日期是否有效,包括闰年的情况\r\n     *\r\n     * @param date\r\n     *          YYYY-mm-dd\r\n     * @return\r\n     */\r\n    public static boolean isDate(String date) {\r\n        StringBuffer reg = new StringBuffer(\r\n                "^((\\\\d{2}(([02468][048])|([13579][26]))-?((((0?");\r\n        reg.append("[13578])|(1[02]))-?((0?[1-9])|([1-2][0-9])|(3[01])))");\r\n        reg.append("|(((0?[469])|(11))-?((0?[1-9])|([1-2][0-9])|(30)))|");\r\n        reg.append("(0?2-?((0?[1-9])|([1-2][0-9])))))|(\\\\d{2}(([02468][12");\r\n        reg.append("35679])|([13579][01345789]))-?((((0?[13578])|(1[02]))");\r\n        reg.append("-?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))");\r\n        reg.append("-?((0?[1-9])|([1-2][0-9])|(30)))|(0?2-?((0?[");\r\n        reg.append("1-9])|(1[0-9])|(2[0-8]))))))");\r\n        Pattern p = Pattern.compile(reg.toString());\r\n        return p.matcher(date).matches();\r\n    }\r\n \r\n    /**\r\n     * 取得指定日期过 months 月后的日期 (当 months 为负数表示指定月之前);\r\n     *\r\n     * @param date\r\n     *          日期 为null时表示当天\r\n     * @param month\r\n     *          相加(相减)的月数\r\n     */\r\n    public static Date nextMonth(Date date, int months) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.MONTH, months);\r\n        return cal.getTime();\r\n    }\r\n \r\n    /**\r\n     * 取得指定日期过 day 天后的日期 (当 day 为负数表示指日期之前);\r\n     *\r\n     * @param date\r\n     *          日期 为null时表示当天\r\n     * @param month\r\n     *          相加(相减)的月数\r\n     */\r\n    public static Date nextDay(Date date, int day) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.DAY_OF_YEAR, day);\r\n        return cal.getTime();\r\n    }\r\n \r\n    /**\r\n     * 取得距离今天 day 日的日期\r\n     * @param day\r\n     * @param format\r\n     * @return\r\n     * @author chenyz\r\n     */\r\n    public static String nextDay(int day, String format) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(new Date());\r\n        cal.add(Calendar.DAY_OF_YEAR, day);\r\n        return dateToString(cal.getTime(), format);\r\n    }\r\n \r\n    /**\r\n     * 取得指定日期过 day 周后的日期 (当 day 为负数表示指定月之前)\r\n     *\r\n     * @param date\r\n     *          日期 为null时表示当天\r\n     */\r\n    public static Date nextWeek(Date date, int week) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.WEEK_OF_MONTH, week);\r\n        return cal.getTime();\r\n    }\r\n \r\n    /**\r\n     * 获取当前的日期(yyyy-MM-dd)\r\n     */\r\n    public static String currDay() {\r\n        return DateUtil.dateToString(new Date(), DateUtil.LONG_DATE_FORMAT);\r\n    }\r\n \r\n    /**\r\n     * 获取昨天的日期\r\n     *\r\n     * @return\r\n     */\r\n    public static String befoDay() {\r\n        return befoDay(DateUtil.LONG_DATE_FORMAT);\r\n    }\r\n \r\n    /**\r\n     * 根据时间类型获取昨天的日期\r\n     * @param format\r\n     * @return\r\n     * @author chenyz\r\n     */\r\n    public static String befoDay(String format) {\r\n        return DateUtil.dateToString(DateUtil.nextDay(new Date(), -1), format);\r\n    }\r\n \r\n    /**\r\n     * 获取明天的日期\r\n     */\r\n    public static String afterDay() {\r\n        return DateUtil.dateToString(DateUtil.nextDay(new Date(), 1),\r\n                DateUtil.LONG_DATE_FORMAT);\r\n    }\r\n \r\n    /**\r\n     * 取得当前时间距离1900/1/1的天数\r\n     *\r\n     * @return\r\n     */\r\n    public static int getDayNum() {\r\n        int daynum = 0;\r\n        GregorianCalendar gd = new GregorianCalendar();\r\n        Date dt = gd.getTime();\r\n        GregorianCalendar gd1 = new GregorianCalendar(1900, 1, 1);\r\n        Date dt1 = gd1.getTime();\r\n        daynum = (int) ((dt.getTime() - dt1.getTime()) / (24 * 60 * 60 * 1000));\r\n        return daynum;\r\n    }\r\n \r\n    /**\r\n     * getDayNum的逆方法(用于处理Excel取出的日期格式数据等)\r\n     *\r\n     * @param day\r\n     * @return\r\n     */\r\n    public static Date getDateByNum(int day) {\r\n        GregorianCalendar gd = new GregorianCalendar(1900, 1, 1);\r\n        Date date = gd.getTime();\r\n        date = nextDay(date, day);\r\n        return date;\r\n    }\r\n \r\n    /** 针对yyyy-MM-dd HH:mm:ss格式,显示yyyymmdd */\r\n    public static String getYmdDateCN(String datestr) {\r\n        if (datestr == null)\r\n            return "";\r\n        if (datestr.length() < 10)\r\n            return "";\r\n        StringBuffer buf = new StringBuffer();\r\n        buf.append(datestr.substring(0, 4)).append(datestr.substring(5, 7))\r\n                .append(datestr.substring(8, 10));\r\n        return buf.toString();\r\n    }\r\n \r\n    /**\r\n     * 获取本月第一天\r\n     *\r\n     * @param format\r\n     * @return\r\n     */\r\n    public static String getFirstDayOfMonth(String format) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.set(Calendar.DATE, 1);\r\n        return dateToString(cal.getTime(), format);\r\n    }\r\n \r\n    /**\r\n     * 获取本月最后一天\r\n     *\r\n     * @param format\r\n     * @return\r\n     */\r\n    public static String getLastDayOfMonth(String format) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.set(Calendar.DATE, 1);\r\n        cal.add(Calendar.MONTH, 1);\r\n        cal.add(Calendar.DATE, -1);\r\n        return dateToString(cal.getTime(), format);\r\n    }\r\n}', '时间操作', 'java', 1),
	(85, 'Scala 实现快速排序', 'erhu', '2011-01-24 18:47:38', '2011-05-04 20:56:08', 'package examples\r\n\r\n/** Quick sort, functional style */\r\nobject sort1 {\r\n  def sort(a: List[Int]): List[Int] = {\r\n    if (a.length < 2)\r\n      a\r\n    else {\r\n      val pivot = a(a.length / 2)\r\n      sort(a.filter(_ < pivot)) :::\r\n           a.filter(_ == pivot) :::\r\n           sort(a.filter(_ > pivot))\r\n    }\r\n  }\r\n  def main(args: Array[String]) {\r\n    val xs = List(6, 2, 8, 5, 1)\r\n    println(xs)\r\n    println(sort(xs))\r\n  }\r\n}', 'scala,排序', 'scala', 8),
	(86, 'Scala之Socket通讯示例', 'erhu', '2011-01-24 18:49:22', '2011-01-24 18:50:33', 'package examples\r\n\r\nimport java.io._\r\nimport java.net.{InetAddress,ServerSocket,Socket,SocketException}\r\nimport java.util.Random\r\n\r\n/**\r\n * Simple client/server application using Java sockets.\r\n *\r\n * The server simply generates random integer values and\r\n * the clients provide a filter function to the server\r\n * to get only values they interested in (eg. even or\r\n * odd values, and so on).\r\n */\r\nobject randomclient {\r\n    \r\n  def main(args: Array[String]) {\r\n    val filter: Int => Boolean = try {\r\n      Integer.parseInt(args(0)) match {\r\n        case 1 => x: Int => x % 2 != 0\r\n        case 2 => x: Int => x % 2 == 0\r\n        case _ => x: Int => x != 0\r\n      }\r\n    }\r\n    catch {\r\n      case _ => x: Int => x < 100\r\n    }\r\n\r\n    try {\r\n      val ia = InetAddress.getByName("localhost")\r\n      val socket = new Socket(ia, 9999)\r\n      val out = new ObjectOutputStream(\r\n        new DataOutputStream(socket.getOutputStream()))\r\n      val in = new DataInputStream(socket.getInputStream())\r\n\r\n      out.writeObject(filter)\r\n      out.flush()\r\n\r\n      while (true) {\r\n        val x = in.readInt()\r\n        println("x = " + x)\r\n      }\r\n      out.close()\r\n      in.close()\r\n      socket.close()\r\n    }\r\n    catch {\r\n      case e: IOException =>\r\n        e.printStackTrace()\r\n    }\r\n  }\r\n\r\n}\r\n\r\nobject randomserver {\r\n\r\n  def main(args: Array[String]): Unit = {\r\n    try {\r\n      val listener = new ServerSocket(9999);\r\n      while (true)\r\n        new ServerThread(listener.accept()).start();\r\n      listener.close()\r\n    }\r\n    catch {\r\n      case e: IOException =>\r\n        System.err.println("Could not listen on port: 9999.");\r\n        System.exit(-1)\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncase class ServerThread(socket: Socket) extends Thread("ServerThread") {\r\n\r\n  override def run(): Unit = {\r\n    val rand = new Random(System.currentTimeMillis());\r\n    try {\r\n      val out = new DataOutputStream(socket.getOutputStream());\r\n      val in = new ObjectInputStream(\r\n        new DataInputStream(socket.getInputStream()));\r\n\r\n      val filter = in.readObject().asInstanceOf[Int => Boolean];\r\n\r\n      while (true) {\r\n        var succeeded = false;\r\n        do {\r\n          val x = rand.nextInt(1000);\r\n          succeeded = filter(x);\r\n          if (succeeded) out.writeInt(x)\r\n        } while (! succeeded);\r\n        Thread.sleep(100)\r\n      }\r\n\r\n      out.close();\r\n      in.close();\r\n      socket.close()\r\n    }\r\n    catch {\r\n      case e: SocketException =>\r\n        () // avoid stack trace when stopping a client with Ctrl-C\r\n      case e: IOException =>\r\n        e.printStackTrace();\r\n    }\r\n  }\r\n}', '', 'scala', 1),
	(88, 'java IO demo', 'erhu', '2011-01-24 19:01:32', '2011-04-18 17:13:07', 'import java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.channels.Channels;\r\nimport java.nio.channels.FileChannel;\r\nimport java.util.GregorianCalendar;\r\n \r\npublic class Test {\r\n \r\n	/**\r\n	* @param args\r\n	* @throws Exception\r\n	*/\r\n	public static void main(String[] args) throws Exception {\r\n		GregorianCalendar begin = new GregorianCalendar();\r\n		FileChannel write_channel = null;\r\n		FileChannel read_channel = null;\r\n		String readFilePath = "D:\\\\BJ\\\\temp\\\\ETL导入_4列测试结果\\\\10000000行.txt";\r\n		String writeFilePath = "D:\\\\BJ\\\\temp\\\\ETL导入_4列测试结果\\\\10000000行_1.txt";\r\n		File file_to_write = new File(writeFilePath);\r\n		File file_to_read = new File(readFilePath);\r\n		if (file_to_write.exists() && file_to_write.delete())\r\n			file_to_write.createNewFile();\r\n	 \r\n		write_channel = new FileOutputStream(file_to_write).getChannel();\r\n		read_channel = new FileInputStream(file_to_read).getChannel();\r\n		BufferedReader reader = new BufferedReader(Channels.newReader(read_channel, "GBK"));\r\n		String data = "";\r\n		StringBuilder sb = new StringBuilder();\r\n		while ((data = reader.readLine()) != null) {\r\n			sb.append(data).append("\\r\\n");\r\n			write_channel.write(ByteBuffer.wrap(sb.toString().getBytes()));\r\n			sb.setLength(0);\r\n		}\r\n                write_channel.close();\r\n                read_channel.close();\r\n		GregorianCalendar end = new GregorianCalendar();\r\n		long time = getSecondsBetweenTwoDate(begin, end);\r\n		System.out.println(time);\r\n	}\r\n \r\n	public final static long getSecondsBetweenTwoDate(GregorianCalendar gc1, GregorianCalendar gc2) {\r\n		long milliSeconds = Math.abs(gc1.getTimeInMillis() - gc2.getTimeInMillis());\r\n		return (long) (milliSeconds / 1000.0);\r\n	}\r\n}', 'IO', 'java', 7),
	(90, '[OSChina] web.xml', 'erhu', '2011-01-26 12:54:05', '2011-02-11 13:15:17', '<?xml version="1.0" encoding="UTF-8"?>\r\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n        xmlns="http://java.sun.com/xml/ns/j2ee"\r\n        xmlns:web="http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"\r\n        xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee \r\n        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"\r\n        version="2.4">\r\n\r\n	<display-name>OSChina.NET</display-name>\r\n	\r\n	<!-- filters -->\r\n	<filter>\r\n		<filter-name>global</filter-name>\r\n		<filter-class>net.oschina.OSChinaFilter</filter-class>\r\n	</filter>\r\n	<filter>\r\n		<filter-name>myspace</filter-name>\r\n		<filter-class>net.oschina.MySpaceFilter</filter-class>\r\n		<init-param>\r\n			<param-name>domain</param-name>\r\n			<param-value>my.oschina.net</param-value>\r\n		</init-param>\r\n	</filter>\r\n\r\n	<filter-mapping>\r\n		<filter-name>global</filter-name>\r\n		<url-pattern>/*</url-pattern>\r\n	</filter-mapping>\r\n	\r\n	<filter-mapping>\r\n		<filter-name>myspace</filter-name>\r\n		<url-pattern>/*</url-pattern>\r\n	</filter-mapping>\r\n	\r\n	<!-- servlets -->\r\n	<servlet>\r\n		<servlet-name>velocity</servlet-name>\r\n		<servlet-class>my.view.VelocityServlet</servlet-class>\r\n		<init-param>\r\n			<param-name>org.apache.velocity.toolbox</param-name>\r\n			<param-value>/WEB-INF/conf/velocity-toolbox.xml</param-value>\r\n		</init-param>\r\n		<init-param>\r\n			<param-name>org.apache.velocity.properties</param-name>\r\n			<param-value>/WEB-INF/conf/velocity.properties</param-value>\r\n		</init-param>\r\n		<load-on-startup>1</load-on-startup>\r\n	</servlet>\r\n\r\n	<servlet>\r\n		<servlet-name>controller</servlet-name>\r\n		<servlet-class>my.mvc.ActionServlet</servlet-class>\r\n		<init-param>\r\n			<param-name>packages</param-name>\r\n			<!-- 多个包请用逗号隔开 -->\r\n			<param-value>net.oschina.action</param-value>\r\n		</init-param>\r\n		<init-param>\r\n			<param-name>initial_actions</param-name>\r\n			<!-- 多个类请用逗号隔开 -->\r\n			<param-value>visit</param-value>\r\n		</init-param>\r\n		<load-on-startup>2</load-on-startup>\r\n	</servlet>\r\n	\r\n	<servlet>\r\n		<servlet-name>mapping</servlet-name>\r\n		<servlet-class>my.view.URLMappingServlet</servlet-class>\r\n		<init-param><!-- WAP页面路径 -->\r\n			<param-name>wap</param-name>\r\n			<param-value>/WEB-INF/wap/</param-value>\r\n		</init-param>\r\n		<init-param><!-- WAP页面路径 -->\r\n			<param-name>m</param-name>\r\n			<param-value>/WEB-INF/wap/</param-value>\r\n		</init-param>\r\n		<init-param><!-- CSDN合作频道页面路径 -->\r\n			<param-name>opensource.csdn.net</param-name>\r\n			<param-value>/WEB-INF/csdn/</param-value>\r\n		</init-param>\r\n		<init-param><!-- CSDN合作频道页面路径 -->\r\n			<param-name>csdn</param-name>\r\n			<param-value>/WEB-INF/csdn/</param-value>\r\n		</init-param>\r\n		<init-param><!-- WEB页面路径 -->\r\n			<param-name>default</param-name>\r\n			<param-value>/WEB-INF/www/</param-value>\r\n		</init-param>\r\n		<init-param>\r\n			<param-name>myspace</param-name>\r\n			<param-value>/WEB-INF/myspace/</param-value>\r\n		</init-param>\r\n		<load-on-startup>3</load-on-startup>\r\n	</servlet>\r\n\r\n	<servlet-mapping>\r\n		<servlet-name>velocity</servlet-name>\r\n		<url-pattern>*.vm</url-pattern>\r\n	</servlet-mapping>\r\n	\r\n	<servlet-mapping>\r\n		<servlet-name>velocity</servlet-name>\r\n		<url-pattern>/sitemap.xml</url-pattern>\r\n	</servlet-mapping>\r\n\r\n	<servlet-mapping>\r\n		<servlet-name>controller</servlet-name>\r\n		<url-pattern>/action/*</url-pattern>\r\n	</servlet-mapping>\r\n\r\n	<servlet-mapping>\r\n		<servlet-name>mapping</servlet-name>\r\n		\r\n		<url-pattern>/home/*</url-pattern>	<!-- 首页 -->\r\n		<url-pattern>/shop/*</url-pattern>	<!-- 团购 -->\r\n		<url-pattern>/user/*</url-pattern>	<!-- 用户页 -->\r\n		<url-pattern>/project/*</url-pattern>	<!-- 项目页 -->\r\n		<url-pattern>/p/*</url-pattern>\r\n		<url-pattern>/blog/*</url-pattern>	<!-- 博客频道 -->\r\n		<url-pattern>/news/*</url-pattern>	<!-- 新闻频道 -->\r\n		<url-pattern>/bbs/*</url-pattern>\r\n		<url-pattern>/code/*</url-pattern>	<!-- Code Snipplet-->\r\n		<url-pattern>/help/*</url-pattern>\r\n		<url-pattern>/widgets/*</url-pattern>	<!-- Widgets -->\r\n		<url-pattern>/admin/*</url-pattern>	<!-- 管理页 -->\r\n	</servlet-mapping>\r\n	\r\n	<!-- servlet config -->\r\n	<session-config>\r\n		<session-timeout>30</session-timeout>\r\n	</session-config>\r\n\r\n	<welcome-file-list>\r\n		<welcome-file>index.vm</welcome-file>\r\n		<welcome-file>index.html</welcome-file>\r\n	</welcome-file-list>\r\n\r\n	<error-page>\r\n		<error-code>403</error-code>\r\n		<location>/403.html</location>\r\n	</error-page>\r\n	<error-page>\r\n		<error-code>404</error-code>\r\n		<location>/404.vm</location>\r\n	</error-page>\r\n	<error-page>\r\n		<error-code>500</error-code>\r\n		<location>/500.vm</location>\r\n	</error-page>\r\n\r\n</web-app>', 'oschina', 'xml', 1),
	(91, '[OSChina] DBManager类', 'erhu', '2011-02-10 08:56:23', '2011-02-11 12:48:48', '/** \r\n应会员们的要求，贴出 DBManager 类，这个类是用来管理数据库连接的，底层使用的是 c3p0 连接池.*/\r\npackage my.db;\r\n\r\nimport java.sql.*;\r\nimport java.util.*;\r\nimport java.lang.reflect.*;\r\n\r\nimport javax.sql.DataSource;\r\n\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * 数据库管理\r\n * @author Winter Lau\r\n * @date 2010-2-2 下午10:18:50\r\n */\r\npublic class DBManager {\r\n\r\n	private final static Log log = LogFactory.getLog(DBManager.class);\r\n	private final static ThreadLocal<Connection> conns = new ThreadLocal<Connection>();\r\n	private static DataSource dataSource;\r\n	private static boolean show_sql = false;\r\n	\r\n	static {\r\n		initDataSource(null);\r\n	}\r\n\r\n	/**\r\n	 * 初始化连接池\r\n	 * @param props\r\n	 * @param show_sql\r\n	 */\r\n	private final static void initDataSource(Properties dbProperties) {\r\n		try {\r\n			if(dbProperties == null){\r\n				dbProperties = new Properties();\r\n				dbProperties.load(DBManager.class.getResourceAsStream("db.properties"));\r\n			}\r\n			Properties cp_props = new Properties();\r\n			for(Object key : dbProperties.keySet()) {\r\n				String skey = (String)key;\r\n				if(skey.startsWith("jdbc.")){\r\n					String name = skey.substring(5);\r\n					cp_props.put(name, dbProperties.getProperty(skey));\r\n					if("show_sql".equalsIgnoreCase(name)){\r\n						show_sql = "true".equalsIgnoreCase(dbProperties.getProperty(skey));\r\n					}\r\n				}\r\n			}\r\n			dataSource = (DataSource)Class.forName(cp_props.getProperty("datasource")).newInstance();\r\n			if(dataSource.getClass().getName().indexOf("c3p0")>0){\r\n				//Disable JMX in C3P0\r\n				System.setProperty("com.mchange.v2.c3p0.management.ManagementCoordinator", \r\n						"com.mchange.v2.c3p0.management.NullManagementCoordinator");\r\n			}\r\n			log.info("Using DataSource : " + dataSource.getClass().getName());\r\n			BeanUtils.populate(dataSource, cp_props);\r\n\r\n			Connection conn = getConnection();\r\n			DatabaseMetaData mdm = conn.getMetaData();\r\n			log.info("Connected to " + mdm.getDatabaseProductName() + \r\n                              " " + mdm.getDatabaseProductVersion());\r\n			closeConnection();\r\n		} catch (Exception e) {\r\n			throw new DBException(e);\r\n		}\r\n	}\r\n	\r\n	/**\r\n	 * 断开连接池\r\n	 */\r\n	public final static void closeDataSource(){\r\n		try {\r\n			dataSource.getClass().getMethod("close").invoke(dataSource);\r\n		} catch (NoSuchMethodException e){ \r\n		} catch (Exception e) {\r\n			log.error("Unabled to destroy DataSource!!! ", e);\r\n		}\r\n	}\r\n\r\n	public final static Connection getConnection() throws SQLException {\r\n		Connection conn = conns.get();\r\n		if(conn ==null || conn.isClosed()){\r\n			conn = dataSource.getConnection();\r\n			conns.set(conn);\r\n		}\r\n		return (show_sql && !Proxy.isProxyClass(conn.getClass()))?\r\n                      new _DebugConnection(conn).getConnection():conn;\r\n	}\r\n	\r\n	/**\r\n	 * 关闭连接\r\n	 */\r\n	public final static void closeConnection() {\r\n		Connection conn = conns.get();\r\n		try {\r\n			if(conn != null && !conn.isClosed()){\r\n				conn.setAutoCommit(true);\r\n				conn.close();\r\n			}\r\n		} catch (SQLException e) {\r\n			log.error("Unabled to close connection!!! ", e);\r\n		}\r\n		conns.set(null);\r\n	}\r\n\r\n	/**\r\n	 * 用于跟踪执行的SQL语句\r\n	 * @author Winter Lau\r\n	 */\r\n	static class _DebugConnection implements InvocationHandler {\r\n		\r\n		private final static Log log = LogFactory.getLog(_DebugConnection.class);\r\n		\r\n		private Connection conn = null;\r\n\r\n		public _DebugConnection(Connection conn) {\r\n			this.conn = conn;\r\n		}\r\n\r\n		/**\r\n		 * Returns the conn.\r\n		 * @return Connection\r\n		 */\r\n		public Connection getConnection() {\r\n			return (Connection) Proxy.newProxyInstance(conn.getClass().getClassLoader(), \r\n                             conn.getClass().getInterfaces(), this);\r\n		}\r\n		\r\n		public Object invoke(Object proxy, Method m, Object[] args) throws Throwable {\r\n			try {\r\n				String method = m.getName();\r\n				if("prepareStatement".equals(method) || "createStatement".equals(method))\r\n					log.info("[SQL] >>> " + args[0]);				\r\n				return m.invoke(conn, args);\r\n			} catch (InvocationTargetException e) {\r\n				throw e.getTargetException();\r\n			}\r\n		}\r\n\r\n	}\r\n	\r\n}', 'dbmanager, 数据库, C3P0, oschina', 'java', 1),
	(92, '常用js', 'erhu', '2011-02-17 09:44:59', '2011-02-17 09:45:26', '// 设置对象属性不可编辑或者不可用,并修改其外观\r\ndocument.forms[0].dynamicClassName.readOnly = true;\r\ndocument.forms[0].dynamicClassName.style.backgroundColor = "#ECF0FC";\r\ndocument.forms[0].dynamicClassName.style.border = "1px solid #7F9DB9";\r\n\r\ndocument.forms[0].save.disabled=true;\r\n//-----------------------------------------------------------------------', '', 'js', 2),
	(93, 'zip减压(java)', 'erhu', '2011-02-18 09:45:03', '2011-02-18 16:49:37', 'package com.util;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipInputStream;\r\nimport java.util.zip.ZipOutputStream;\r\n\r\n/**\r\n * 压缩类\r\n * \r\n * @author Erhu\r\n * @date Feb 18th, 2011\r\n */\r\npublic class ZipUtil {\r\n	/**\r\n	 * 减压ZIP文件\r\n	 * \r\n	 * @param _zipFileName\r\n	 * @param _outputDirectory\r\n	 * @throws Exception\r\n	 */\r\n	private static void createDirectory(String directory, String subDirectory) {\r\n		String dir[] = null;\r\n		File fl = new File(directory);\r\n		try {\r\n			if (subDirectory == "" && fl.exists() != true)\r\n				fl.mkdir();\r\n			else if (subDirectory != "") {\r\n				dir = subDirectory.replace(\'\\\\\', \'/\').split("/");\r\n				for (int i = 0; i < dir.length; i++) {\r\n					File subFile = new File(directory + File.separator + dir[i]);\r\n					if (subFile.exists() == false)\r\n						subFile.mkdir();\r\n					directory += File.separator + dir[i];\r\n				}\r\n			}\r\n		} catch (Exception ex) {\r\n			log.info(ex.getMessage());\r\n		}\r\n	}\r\n\r\n	@SuppressWarnings("unchecked")\r\n	public static List<File> unZip(String zipFileName, String outputDirectory) {\r\n		List<File> file_list = new ArrayList<File>();\r\n\r\n		org.apache.tools.zip.ZipFile zipFile = null;\r\n		try {\r\n			zipFile = new org.apache.tools.zip.ZipFile(zipFileName);\r\n		} catch (IOException e1) {\r\n			e1.printStackTrace();\r\n		}\r\n		java.util.Enumeration e = zipFile.getEntries();\r\n		org.apache.tools.zip.ZipEntry zipEntry = null;\r\n		createDirectory(outputDirectory, "");\r\n		while (e.hasMoreElements()) {\r\n			zipEntry = (org.apache.tools.zip.ZipEntry) e.nextElement();\r\n			log.info("unziping " + zipEntry.getName());\r\n			if (zipEntry.isDirectory()) {\r\n				String name = zipEntry.getName();\r\n				new File(outputDirectory + File.separator + name.substring(0, name.length() - 1)).mkdir();\r\n				log.info("创建目录：" + outputDirectory + File.separator + name);\r\n			} else {\r\n				String fileName = zipEntry.getName();\r\n				fileName = fileName.replace(\'\\\\\', \'/\');\r\n				if (fileName.indexOf("/") != -1) {\r\n					createDirectory(outputDirectory, fileName.substring(0, fileName.lastIndexOf("/")));\r\n					fileName = fileName.substring(fileName.lastIndexOf("/") + 1, fileName.length());\r\n				}\r\n				File t_file = new File(outputDirectory + File.separator + zipEntry.getName());\r\n				// t_file.createNewFile();\r\n				InputStream in = null;\r\n				FileOutputStream out = null;\r\n				try {\r\n					in = zipFile.getInputStream(zipEntry);\r\n					out = new FileOutputStream(t_file);\r\n					byte[] buffer = new byte[1024];\r\n					int count = -1;\r\n					while ((count = in.read(buffer)) != -1)\r\n						out.write(buffer, 0, count);\r\n					file_list.add(t_file);\r\n				} catch (IOException e1) {\r\n					e1.printStackTrace();\r\n				} finally {\r\n					try {\r\n						if (out != null)\r\n							out.close();\r\n						if (in != null)\r\n							in.close();\r\n					} catch (IOException e1) {\r\n						e1.printStackTrace();\r\n					}\r\n				}\r\n			}\r\n		}\r\n\r\n		return file_list;\r\n	}\r\n\r\n	public static void main(String[] args) throws Exception {\r\n		// ZipUtil.zip("c:\\\\test.zip", "c:\\\\bak");\r\n		// ZipUtil.unzip(new File("D:/BJ/胡俊杰/Design/SF商飞_web导入/SF商飞_web导入.zip"),\r\n		// "c:/bak2");\r\n		// ZipUtil.unZip("D:/BJ/胡俊杰/Design/SF商飞_web导入/SF商飞_web导入.zip",\r\n		// "c:/bak2");\r\n		// System.out.println(new File("C:/bak.zip").getPath());\r\n		ZipUtil.unZip("C:/bak.zip", "c:/bak2");\r\n	}\r\n}', '减压, java', 'java', 1),
	(94, '压缩字符串中的空格', 'erhu', '2011-02-21 13:45:33', '2011-03-01 08:54:38', '/**\r\n * 压缩字符串中的空白字符\r\n * \r\n * @param str\r\n * @return\r\n */\r\npublic static String compressBlank(String str) {\r\n	str = str.trim();\r\n	if (Tools.isNullString(str))\r\n		return "";\r\n	StringBuilder str_bu = new StringBuilder();\r\n	char[] str_arr = str.toCharArray();\r\n	for (int i = 0; i < str_arr.length; i++) {\r\n		if (!isBlank(str_arr[i]))\r\n			str_bu.append(str_arr[i]);\r\n		else if (isBlank(str_arr[i]) && i + 1 < str_arr.length && !isBlank(str_arr[i + 1]))\r\n			str_bu.append((char) 32);\r\n	}\r\n	return str_bu.toString();\r\n}\r\n\r\n/**\r\n * 判断某字符是否是空白字符\r\n * \r\n * @param c\r\n * @return\r\n */\r\npublic static boolean isBlank(char c) {\r\n	return (int) c == 9 || (int) c == 32;\r\n}', '压缩空格', 'java', 1),
	(95, '将科学记数法表示的数字转换成Double', 'erhu', '2011-02-21 14:22:15', '2011-02-21 14:23:03', '/**\r\n * 将用科学计数法表示的数据转换成Double类型数字\r\n * \r\n * @param _sn\r\n *            -1.2917861e-002<br>\r\n * @return double(小数点后保留7位数字)\r\n */\r\npublic static double scientificNotation2Double(final String _sn) {\r\n	if (Tools.isNullString(_sn))\r\n		return 0;\r\n	String sn = Tools.compressBlank(_sn.toUpperCase()).replace("E-", "E");\r\n	return Double.parseDouble(String.format("%.7f", new BigDecimal(sn)));\r\n}', '进制转换, 科学记数法', 'java', 2),
	(100, '冒泡排序', 'erhu', '2011-03-01 09:22:13', '2011-05-04 14:55:11', 'package algorithm.sort;\r\n\r\nimport basic.util.Tool;\r\n\r\n/**\r\n * 冒泡排序\r\n * 时间复杂度：O(n平方)=n(n -1)/2:等差数列求和、\r\n * 空间复杂度：O(1)\r\n * 稳定性：稳定\r\n */\r\npublic class BubbleSort implements ISort {\r\n\r\n    @Override\r\n    public void sort(int[] _arr) {\r\n        for (int i = 0; i < _arr.length - 1; i++) {// n-1次\r\n            boolean swapped = false;// 标记趟排序是否有交换产生\r\n            for (int j = 0; j < _arr.length - 1 - i; j++) {\r\n                if (_arr[j] > _arr[j + 1]) {// 比较的两个元素的索引来自内层循环计数器\r\n                    Tool.swap(_arr, j + 1, j);\r\n                    swapped = true;\r\n                }\r\n            }\r\n            if (!swapped)\r\n                break;\r\n        }\r\n    }\r\n}', '排序', 'java', 28),
	(101, 'JAVA ThreadGroup示例', 'erhu', '2011-03-01 11:07:54', NULL, 'class ThreadExceptionHandler implements Thread.UncaughtExceptionHandler {\r\n	public void uncaughtException(Thread _t, Throwable _e) {\r\n		System.out.println(_t.getName() + ":" + _e.getMessage());\r\n	}\r\n}\r\npublic class ThreadGroupTest {\r\n	public static void main(String[] args) {\r\n		ThreadExceptionHandler handler = new ThreadExceptionHandler();\r\n		ThreadGroup t_group = new ThreadGroup("demoGroup");\r\n		\r\n		Thread thread = new Thread(t_group, new Runnable(){\r\n			public void run() {\r\n				throw new RuntimeException("test exception");\r\n			}\r\n		});\r\n		thread.setUncaughtExceptionHandler(handler);\r\n		thread.start();\r\n	}\r\n}', 'threadgroup', 'java', 1),
	(102, 'JAVA Thread join示例', 'erhu', '2011-03-01 11:08:45', '2011-03-01 11:09:06', 'public class ThreadJoin {\r\n        public static void main(String[] args) {\r\n            System.out.println("Thread A running!");\r\n            Thread threadB = new Thread(new Runnable(){\r\n                public void run() {\r\n                    try {\r\n                            System.out.println("Thread B begin...");\r\n                            for (int i = 0; i < 5; i ++) {\r\n                                    Thread.sleep(1000);\r\n                                    System.out.println("Thread B running!");\r\n                            }\r\n                            System.out.println("Thread B end...");\r\n                    } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                    }\r\n                }\r\n            });\r\n            threadB.start();\r\n            System.out.println("here");\r\n            try {\r\n                // 加入的线程最多执行2秒，然后换由A执行，然后再执行B剩余的部分。\r\n                threadB.join(2000);// 将线程加入成为另一个线程的流程之一，并先执行之（即使threadB中有sleep()）。\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            System.out.println("Thread A running!");\r\n        }\r\n}', 'java, theadjoin', 'java', 1),
	(103, '[OSChina]ActionServlet 控制类', 'erhu', '2011-03-01 11:17:49', '2011-03-24 14:53:49', '//ActionServlet 这个类在 OSChina 是负责处理表单请求的，所有以 /action 开头的请求，自己感觉还不甚满意，别拍我砖头。示例action类： FileAction\r\npackage my.mvc;\r\n\r\nimport java.io.*;\r\nimport java.lang.reflect.*;\r\nimport java.net.URLDecoder;\r\nimport java.util.*;\r\n\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.*;\r\n\r\nimport my.db.DBException;\r\nimport my.util.ResourceUtils;\r\n\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.apache.commons.lang.math.NumberUtils;\r\n\r\n/**\r\n * 业务处理方法入口，URI的映射逻辑：\r\n * /action/xxxxxx/xxxx -> com.dlog4j.action.XxxxxxAction.xxxx(req,res)\r\n * <pre>\r\n	林花谢了春红，\r\n	太匆匆，\r\n	无奈朝来寒雨晚来风。\r\n\r\n	胭脂泪，\r\n	相留醉，\r\n	几时重，\r\n	自是人生长恨水长东。\r\n * </pre>\r\n * @author Winter Lau (http://my.oschina.net/javayou)<br> */\r\npublic final class ActionServlet extends HttpServlet {\r\n\r\n	private final static String ERROR_PAGE = "error_page";\r\n	private final static String GOTO_PAGE = "goto_page";\r\n	private final static String THIS_PAGE = "this_page";\r\n	private final static String ERROR_MSG = "error_msg";\r\n	\r\n	private final static String UTF_8 = "utf-8";	\r\n	private List<String> action_packages = null;\r\n	private final static ThreadLocal<Boolean> g_json_enabled = new ThreadLocal<Boolean>();\r\n	\r\n	@Override\r\n	public void init() throws ServletException {\r\n		String tmp = getInitParameter("packages");\r\n		action_packages = Arrays.asList(StringUtils.split(tmp,\',\'));\r\n		String initial_actions = getInitParameter("initial_actions");\r\n		for(String action : StringUtils.split(initial_actions,\',\'))\r\n			try {\r\n				_LoadAction(action);\r\n			} catch (Exception e) {\r\n				log("Failed to initial action : " + action, e);\r\n			}\r\n	}\r\n\r\n	@Override\r\n	public void destroy() {\r\n		for(Object action : actions.values()){\r\n			try{\r\n				Method dm = action.getClass().getMethod("destroy");\r\n				if(dm != null){\r\n					dm.invoke(action);\r\n					log("!!!!!!!!! " + action.getClass().getSimpleName() + \r\n						" destroy !!!!!!!!!");\r\n				}\r\n			}catch(NoSuchMethodException e){\r\n			}catch(Exception e){\r\n				log("Unabled to destroy action: " + action.getClass().getSimpleName(), e);\r\n			}\r\n		}\r\n		super.destroy();\r\n	}\r\n	\r\n	@Override\r\n	protected void doGet(HttpServletRequest req, HttpServletResponse resp)\r\n			throws ServletException, IOException {\r\n		process(RequestContext.get(), false);\r\n	}\r\n\r\n	@Override\r\n	protected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n			throws ServletException, IOException {\r\n		process(RequestContext.get(), true);\r\n	}\r\n	\r\n	/**\r\n	 * 执行Action方法并进行返回处理、异常处理\r\n	 * @param req\r\n	 * @param resp\r\n	 * @param is_post\r\n	 * @throws ServletException\r\n	 * @throws IOException\r\n	 */\r\n	protected void process(RequestContext req, boolean is_post) \r\n		throws ServletException, IOException \r\n	{\r\n		try{\r\n			req.response().setContentType("text/html;charset=utf-8");\r\n			if(_process(req, is_post)){ \r\n				String gp = req.param(GOTO_PAGE);\r\n				if(StringUtils.isNotBlank(gp))\r\n					req.redirect(gp);\r\n			}\r\n		}catch(InvocationTargetException e){\r\n			Throwable t = e.getCause();\r\n			if(t instanceof ActionException)\r\n				handleActionException(req, (ActionException)t);\r\n			else if(t instanceof DBException)\r\n				handleDBException(req, (DBException)t);\r\n			else\r\n				throw new ServletException(t);\r\n		}catch(ActionException t){\r\n			handleActionException(req, t);\r\n		}catch(IOException e){\r\n			throw e;\r\n		}catch(DBException e){\r\n			handleDBException(req, e);\r\n		}catch(Exception e){\r\n			log("Exception in action process.", e);\r\n			throw new ServletException(e);\r\n		}finally{\r\n			g_json_enabled.remove();\r\n		}\r\n	}\r\n	\r\n	/**\r\n	 * Action业务异常\r\n	 * @param req\r\n	 * @param resp\r\n	 * @param t\r\n	 * @throws ServletException\r\n	 * @throws IOException\r\n	 */\r\n	protected void handleActionException(RequestContext req, ActionException t)	\r\n		throws ServletException, IOException \r\n	{		\r\n		handleException(req, t.getMessage());\r\n	}\r\n	\r\n	protected void handleDBException(RequestContext req, DBException e) \r\n		throws ServletException, IOException \r\n	{\r\n		log("DBException in action process.", e);\r\n		handleException(req, ResourceUtils.getString("error", \r\n			"database_exception", e.getCause().getMessage()));\r\n	}\r\n	\r\n	/**\r\n	 * URL解码\r\n	 * \r\n	 * @param url\r\n	 * @param charset\r\n	 * @return\r\n	 */\r\n	private static String _DecodeURL(String url, String charset) {\r\n		if (StringUtils.isEmpty(url))\r\n			return "";\r\n		try {\r\n			return URLDecoder.decode(url, charset);\r\n		} catch (Exception e) {\r\n		}\r\n		return url;\r\n	}\r\n\r\n	protected void handleException(RequestContext req, String msg) \r\n		throws ServletException, IOException \r\n	{\r\n		String ep = req.param(ERROR_PAGE);\r\n		if(StringUtils.isNotBlank(ep)){\r\n			if(ep.charAt(0)==\'%\')\r\n				ep = _DecodeURL(ep, UTF_8);\r\n			ep = ep.trim();\r\n			if(ep.charAt(0)!=\'/\'){\r\n				req.redirect(req.contextPath()+"/");\r\n			}\r\n			else{\r\n				req.request().setAttribute(ERROR_MSG, msg);\r\n				req.forward(ep.trim());\r\n			}\r\n		}\r\n		else{\r\n			if(g_json_enabled.get())\r\n				req.output_json("msg", msg);\r\n			else\r\n				req.print(msg);\r\n		}\r\n	}	\r\n	\r\n	/**\r\n	 * 业务逻辑处理\r\n	 * @param req\r\n	 * @param resp\r\n	 * @param is_post_method\r\n	 * @throws IllegalAccessException \r\n	 * @throws InstantiationException \r\n	 * @throws IOException \r\n	 * @throws ServletException\r\n	 * @throws IOException\r\n	 * @throws InvocationTargetException \r\n	 * @throws IllegalArgumentException \r\n	 */\r\n	private boolean _process(RequestContext req, boolean is_post)\r\n			 throws InstantiationException,\r\n					IllegalAccessException, \r\n					IOException, \r\n					IllegalArgumentException,\r\n					InvocationTargetException\r\n	{\r\n		String requestURI = req.uri();\r\n		String[] parts = StringUtils.split(requestURI, \'/\');\r\n		if(parts.length<2){\r\n			req.not_found();\r\n			return false;\r\n		}\r\n		//加载Action类\r\n		Object action = this._LoadAction(parts[1]);\r\n		if(action == null){\r\n			req.not_found();\r\n			return false;\r\n		}\r\n		String action_method_name = (parts.length>2)?parts[2]:"index";\r\n		Method m_action = this._GetActionMethod(action, action_method_name);\r\n		if(m_action == null){\r\n			req.not_found();\r\n			return false;\r\n		}\r\n		\r\n		//判断action方法是否只支持POST\r\n		if (!is_post && m_action.isAnnotationPresent(Annotation.PostMethod.class)){\r\n			req.not_found();\r\n			return false;\r\n		}\r\n		\r\n		g_json_enabled.set(m_action.isAnnotationPresent(Annotation.JSONOutputEnabled.class));\r\n		\r\n		if(m_action.isAnnotationPresent(Annotation.UserRoleRequired.class)){\r\n			IUser loginUser = req.user();\r\n			if(loginUser == null){\r\n				String this_page = req.param(THIS_PAGE, "");\r\n				throw req.error("user_not_login", this_page);\r\n			}\r\n			if(loginUser.IsBlocked())\r\n				throw req.error("user_blocked");\r\n			\r\n			Annotation.UserRoleRequired urr = (Annotation.UserRoleRequired)\r\n				m_action.getAnnotation(Annotation.UserRoleRequired.class);\r\n			if(loginUser.getRole() < urr.role())\r\n				throw req.error("user_role_deny");			\r\n		}\r\n		\r\n		//调用Action方法之准备参数\r\n		int arg_c = m_action.getParameterTypes().length;\r\n		switch(arg_c){\r\n		case 0: // login()\r\n			m_action.invoke(action);\r\n			break ;\r\n		case 1:\r\n			m_action.invoke(action, req);\r\n			break;\r\n		case 2: // login(HttpServletRequest req, HttpServletResponse res)\r\n			m_action.invoke(action, req.request(), req.response());\r\n			break ;\r\n		case 3: // login(HttpServletRequest req, HttpServletResponse res, String[] extParams)\r\n			StringBuilder args = new StringBuilder();\r\n			for(int i=3;i<parts.length;i++){\r\n				if(StringUtils.isBlank(parts[i]))\r\n					continue;\r\n				if(args.length() > 0)\r\n					args.append(\'/\');\r\n				args.append(parts[i]);\r\n			}\r\n			boolean isLong = m_action.getParameterTypes()[2].equals(long.class);\r\n			m_action.invoke(action, req.request(), req.response(), isLong ? NumberUtils.toLong(\r\n					args.toString(), -1L) : args.toString());\r\n			break ;\r\n		default:\r\n			req.not_found();\r\n			return false;\r\n		}\r\n		\r\n		return true;\r\n	}\r\n	\r\n	/**\r\n	 * 加载Action类\r\n	 * @param act_name\r\n	 * @return\r\n	 * @throws InstantiationException\r\n	 * @throws IllegalAccessException\r\n	 * @throws ClassNotFoundException\r\n	 */\r\n	protected Object _LoadAction(String act_name) \r\n		throws InstantiationException,IllegalAccessException \r\n	{\r\n		Object action = actions.get(act_name);\r\n		if(action == null){\r\n			for(String pkg : action_packages){\r\n				String cls = pkg + \'.\' + StringUtils.capitalize(act_name) + "Action";\r\n				action = _LoadActionOfFullname(act_name, cls);\r\n				if(action != null)\r\n					break;\r\n			}\r\n		}\r\n		return action ;\r\n	}\r\n	\r\n	private Object _LoadActionOfFullname(String act_name, String cls) \r\n		throws IllegalAccessException, InstantiationException \r\n	{\r\n		Object action = null;\r\n		try {								\r\n			action = Class.forName(cls).newInstance();\r\n			try{\r\n				Method action_init_method = action.getClass().getMethod("init", ServletContext.class);\r\n				action_init_method.invoke(action, getServletContext());\r\n			}catch(NoSuchMethodException e){\r\n			}catch(InvocationTargetException excp) {\r\n				excp.printStackTrace();\r\n			}\r\n			if(!actions.containsKey(act_name)){\r\n				synchronized(actions){\r\n					actions.put(act_name, action);\r\n				}\r\n			}\r\n		} catch (ClassNotFoundException excp) {}\r\n		return action;\r\n	}\r\n	\r\n	/**\r\n	 * 获取名为{method}的方法\r\n	 * @param action\r\n	 * @param method\r\n	 * @return\r\n	 */\r\n	private Method _GetActionMethod(Object action, String method) {\r\n		String key = action.getClass().getSimpleName() + \'.\' + method;\r\n		Method m = methods.get(key);\r\n		if(m != null) return m;\r\n		for(Method m1 : action.getClass().getMethods()){\r\n			if(m1.getModifiers()==Modifier.PUBLIC && m1.getName().equals(method)){\r\n				synchronized(methods){\r\n					methods.put(key, m1);\r\n				}\r\n				return m1 ;\r\n			}\r\n		}\r\n		return null;\r\n	}\r\n\r\n	private final static HashMap<String, Object> actions = new HashMap<String, Object>();\r\n	private final static HashMap<String, Method> methods = new HashMap<String, Method>();\r\n\r\n}\r\nOSChina 的 FileAction 类源码 (FileAction.java)package net.oschina.action;\r\n\r\nimport java.io.*;\r\n\r\nimport org.apache.commons.io.FilenameUtils;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.apache.commons.lang.StringUtils;\r\n\r\nimport net.oschina.beans.File;\r\nimport net.oschina.beans.User;\r\nimport net.oschina.service.StorageService;\r\nimport net.oschina.toolbox.LinkTool;\r\nimport my.mvc.Annotation;\r\nimport my.mvc.RequestContext;\r\nimport my.util.Multimedia;\r\n\r\n/**\r\n * 文件库\r\n * @author Winter Lau\r\n * @date 2010-7-4 下午01:35:12\r\n */\r\npublic class FileAction {\r\n		\r\n	public final static long MAX_FILE_SIZE = 2 * 1024 * 1024;\r\n\r\n	/**\r\n	 * 文件下载\r\n	 * @param ctx\r\n	 * @throws IOException \r\n	 */\r\n	public void download(RequestContext ctx) throws IOException {		\r\n		if(ctx.isRobot()){\r\n			ctx.forbidden();\r\n			return ;\r\n		}\r\n		\r\n		long id = ctx.id();\r\n		File bean = File.INSTANCE.Get(id);\r\n		if(bean == null){\r\n			ctx.not_found();\r\n			return ;\r\n		}\r\n\r\n		String f_ident = ctx.param("fn", "");\r\n		if(id>=100 && !StringUtils.equals(f_ident, bean.getIdent())){\r\n			ctx.not_found();\r\n			return ;\r\n		}\r\n		\r\n		// 检查下载权限\r\n		if(bean.IsLoginRequired() && ctx.user()==null){\r\n			StringBuilder login = new StringBuilder(LinkTool.home("home/login?goto_page="));\r\n			login.append(LinkTool.encode_url(LinkTool.action("file/download?id="+bean.getId()+"&fn="+bean.getIdent())));\r\n			ctx.redirect(login.toString());\r\n			return ;\r\n		}\r\n		\r\n		FileInputStream fis = null;\r\n		try{\r\n			java.io.File file = StorageService.FILES.readFile(bean.getPath());\r\n			fis = new FileInputStream(file);\r\n			//设置 content-type\r\n			ctx.response().setContentLength((int)file.length());\r\n			String ext = FilenameUtils.getExtension(bean.getPath());\r\n			String mine_type = Multimedia.mime_types.get(ext);\r\n			if(mine_type != null)\r\n				ctx.response().setContentType(mine_type);\r\n			String ua = ctx.header("user-agent");\r\n			if(ua != null && ua.indexOf("Firefox")>=0)\r\n				ctx.header("Content-Disposition","attachment; filename*=\\"utf8\'\'" + \r\n				  LinkTool.encode_url(bean.getName())+"."+ext+"\\"");\r\n			else\r\n				ctx.header("Content-Disposition","attachment; filename=" + \r\n				  LinkTool.encode_url(bean.getName()+"."+ext));\r\n			IOUtils.copy(fis, ctx.response().getOutputStream());\r\n			bean.IncDownloadCount(1);\r\n		//}catch(FileNotFoundException e){\r\n		//	ctx.not_found();\r\n		}finally{\r\n			IOUtils.closeQuietly(fis);\r\n		}\r\n	}\r\n	\r\n	/**\r\n	 * 文件上传\r\n	 * @param ctx\r\n	 * @throws IOException \r\n	 */\r\n	@Annotation.UserRoleRequired(role=User.ROLE_EDITOR)\r\n	public void upload(RequestContext ctx) throws IOException {\r\n		File form = ctx.form(File.class);\r\n		if(StringUtils.isBlank(form.getName()))\r\n			throw ctx.error("file_name_empty");\r\n		java.io.File file = ctx.file("file");\r\n		if(file == null)\r\n			throw ctx.error("file_empty");\r\n		if(!File.IsLegalFile(file.getName()))\r\n			throw ctx.error("file_illegal");\r\n		String the_path = form.getUrl();\r\n		//判断文件是否存在\r\n		if(StringUtils.isNotBlank(the_path) && StorageService.FILES.exist(the_path))\r\n			throw ctx.error("file_exists", the_path);\r\n		String uri = StringUtils.isBlank(the_path)?\r\n		StorageService.FILES.save(file):StorageService.FILES.save(file,the_path);//文件存储\r\n		form.setSize(file.length());\r\n		form.setUrl(uri);\r\n		form.setPath(uri);\r\n		form.setUser(ctx.user().getId());\r\n		form.setDl_count(0);\r\n		form.Save();\r\n		throw ctx.error("file_upload_ok", \r\n		  LinkTool.action("file/download?id="+form.getId()+"&fn="+form.getIdent()));\r\n	}\r\n\r\n	/**\r\n	 * 文件修改\r\n	 * @param ctx\r\n	 * @throws IOException \r\n	 */\r\n	@Annotation.UserRoleRequired(role=User.ROLE_EDITOR)\r\n	public void edit(RequestContext ctx) throws IOException {\r\n		File form = ctx.form(File.class);\r\n		if(StringUtils.isBlank(form.getName()))\r\n			throw ctx.error("file_name_empty");\r\n		File bean = File.INSTANCE.Get(form.getId());\r\n		java.io.File pic = ctx.file("file");\r\n		if(pic != null){\r\n			if(!File.IsLegalFile(pic.getName()))\r\n				throw ctx.error("file_illegal");\r\n			bean.setSize(pic.length());\r\n			StorageService.FILES.save(pic, bean.getPath());//文件存储\r\n		}\r\n		bean.setName(form.getName());\r\n		bean.setDetail(form.getDetail());\r\n		bean.setOptions(form.getOptions());\r\n		bean.Update();\r\n		throw ctx.error("file_edit_ok");\r\n	}\r\n\r\n	/**\r\n	 * 文件删除\r\n	 * @param ctx\r\n	 * @throws IOException \r\n	 */\r\n	@Annotation.UserRoleRequired(role=User.ROLE_ADMIN)\r\n	public void delete(RequestContext ctx) throws IOException {\r\n		long id = ctx.id();\r\n		File file = File.INSTANCE.Get(id);\r\n		if(file != null){\r\n			StorageService.FILES.delete(file.getPath());\r\n			file.Delete();			\r\n		}\r\n	}\r\n\r\n}', 'action', 'java', 6),
	(104, '[OSChina ]的缓存管理源码发(基于ehcache)', 'erhu', '2011-03-01 11:20:47', '2011-04-15 14:33:20', '//这些类是oschina用来管理缓存的相关类，使用方法请看这里。\r\n//CacheManager.set(xxxx), CacheManager.get(xxx)\r\n//[代码] CacheManager.java\r\npackage my.cache;\r\n\r\nimport java.io.Serializable;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * 缓存助手\r\n * @author Winter Lau\r\n */\r\npublic class CacheManager {\r\n	\r\n	private final static Log log = LogFactory.getLog(CacheManager.class);\r\n	private static CacheProvider provider;\r\n\r\n	static {\r\n		initCacheProvider("my.cache.EhCacheProvider");\r\n	}\r\n	\r\n	private static void initCacheProvider(String prv_name){\r\n		try{\r\n			CacheManager.provider = (CacheProvider)Class.forName(prv_name).newInstance();\r\n			CacheManager.provider.start();\r\n			log.info("Using CacheProvider : " + provider.getClass().getName());\r\n		}catch(Exception e){\r\n			log.fatal("Unabled to initialize cache provider:" + prv_name + ", using ehcache default.", e);\r\n			CacheManager.provider = new EhCacheProvider();\r\n		}\r\n	}\r\n\r\n	private final static Cache _GetCache(String cache_name, boolean autoCreate) {\r\n		if(provider == null){\r\n			provider = new EhCacheProvider();\r\n		}\r\n		return provider.buildCache(cache_name, autoCreate);\r\n	}\r\n\r\n	/**\r\n	 * 获取缓存中的数据\r\n	 * @param name\r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	public final static Object get(String name, Serializable key){\r\n		//System.out.println("GET1 => " + name+":"+key);\r\n		if(name!=null && key != null)\r\n			return _GetCache(name, true).get(key);\r\n		return null;\r\n	}\r\n	\r\n	/**\r\n	 * 获取缓存中的数据\r\n	 * @param <T>\r\n	 * @param resultClass\r\n	 * @param name\r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	@SuppressWarnings("unchecked")\r\n	public final static <T> T get(Class<T> resultClass, String name, Serializable key){\r\n		//System.out.println("GET2 => " + name+":"+key);\r\n		if(name!=null && key != null)\r\n			return (T)_GetCache(name, true).get(key);\r\n		return null;\r\n	}\r\n	\r\n	/**\r\n	 * 写入缓存\r\n	 * @param name\r\n	 * @param key\r\n	 * @param value\r\n	 */\r\n	public final static void set(String name, Serializable key, Serializable value){\r\n		//System.out.println("SET => " + name+":"+key+"="+value);\r\n		if(name!=null && key != null && value!=null)\r\n			_GetCache(name, true).put(key, value);		\r\n	}\r\n	\r\n	/**\r\n	 * 清除缓冲中的某个数据\r\n	 * @param name\r\n	 * @param key\r\n	 */\r\n	public final static void evict(String name, Serializable key){\r\n		if(name!=null && key != null)\r\n			_GetCache(name, true).remove(key);		\r\n	}\r\n\r\n	/**\r\n	 * 清除缓冲中的某个数据\r\n	 * @param name\r\n	 * @param key\r\n	 */\r\n	public final static void justEvict(String name, Serializable key){\r\n		if(name!=null && key != null){\r\n			Cache cache = _GetCache(name, false);\r\n			if(cache != null)\r\n				cache.remove(key);\r\n		}\r\n	}\r\n\r\n}\r\nCache.java\r\npackage my.cache;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * 缓存接口\r\n * @author Winter Lau\r\n */\r\npublic interface Cache {\r\n\r\n	/**\r\n	 * Get an item from the cache, nontransactionally\r\n	 * @param key\r\n	 * @return the cached object or <tt>null</tt>\r\n	 * @throws CacheException\r\n	 */\r\n	public Object get(Object key) throws CacheException;\r\n	\r\n	/**\r\n	 * Add an item to the cache, nontransactionally, with\r\n	 * failfast semantics\r\n	 * @param key\r\n	 * @param value\r\n	 * @throws CacheException\r\n	 */\r\n	public void put(Object key, Object value) throws CacheException;\r\n	\r\n	/**\r\n	 * Add an item to the cache\r\n	 * @param key\r\n	 * @param value\r\n	 * @throws CacheException\r\n	 */\r\n	public void update(Object key, Object value) throws CacheException;\r\n\r\n	@SuppressWarnings("rawtypes")\r\n	public List keys() throws CacheException ;\r\n	\r\n	/**\r\n	 * Remove an item from the cache\r\n	 */\r\n	public void remove(Object key) throws CacheException;\r\n	\r\n	/**\r\n	 * Clear the cache\r\n	 */\r\n	public void clear() throws CacheException;\r\n	\r\n	/**\r\n	 * Clean up\r\n	 */\r\n	public void destroy() throws CacheException;\r\n	\r\n}package my.cache;\r\n/**\r\n * 缓存异常\r\n * @author Winter Lau\r\n */\r\npublic class CacheException extends RuntimeException {\r\n\r\n	public CacheException(String s) {\r\n		super(s);\r\n	}\r\n\r\n	public CacheException(String s, Throwable e) {\r\n		super(s, e);\r\n	}\r\n\r\n	public CacheException(Throwable e) {\r\n		super(e);\r\n	}\r\n	\r\n}package my.cache;\r\n/**\r\n * Support for pluggable caches.\r\n * @author Winter Lau\r\n */\r\npublic interface CacheProvider {\r\n\r\n	/**\r\n	 * Configure the cache\r\n	 *\r\n	 * @param regionName the name of the cache region\r\n	 * @param autoCreate autoCreate settings\r\n	 * @throws CacheException\r\n	 */\r\n	public Cache buildCache(String regionName, boolean autoCreate) throws CacheException;\r\n\r\n	/**\r\n	 * Callback to perform any necessary initialization of the underlying cache implementation\r\n	 * during SessionFactory construction.\r\n	 *\r\n	 * @param properties current configuration settings.\r\n	 */\r\n	public void start() throws CacheException;\r\n\r\n	/**\r\n	 * Callback to perform any necessary cleanup of the underlying cache implementation\r\n	 * during SessionFactory.close().\r\n	 */\r\n	public void stop();\r\n	\r\n}//$Id: EhCache.java 10716 2006-11-03 19:05:11Z max.andersen@jboss.com $\r\n/**\r\n *  Copyright 2003-2006 Greg Luck, Jboss Inc\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the "License");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an "AS IS" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\npackage my.cache;\r\n\r\nimport java.util.List;\r\n\r\nimport net.sf.ehcache.CacheManager;\r\nimport net.sf.ehcache.Element;\r\n\r\n/**\r\n * EHCache\r\n */\r\npublic class EhCache implements Cache {\r\n	\r\n	private net.sf.ehcache.Cache cache;\r\n\r\n	/**\r\n	 * Creates a new Hibernate pluggable cache based on a cache name.\r\n	 * <p/>\r\n	 *\r\n	 * @param cache The underlying EhCache instance to use.\r\n	 */\r\n	public EhCache(net.sf.ehcache.Cache cache) {\r\n		this.cache = cache;\r\n	}\r\n\r\n	@SuppressWarnings("rawtypes")\r\n	public List keys() throws CacheException {\r\n		return this.cache.getKeys();\r\n	}\r\n\r\n	/**\r\n	 * Gets a value of an element which matches the given key.\r\n	 *\r\n	 * @param key the key of the element to return.\r\n	 * @return The value placed into the cache with an earlier put, or null if not found or expired\r\n	 * @throws CacheException\r\n	 */\r\n	public Object get(Object key) throws CacheException {\r\n		try {\r\n			if ( key == null ) \r\n				return null;\r\n			else {\r\n				Element element = cache.get( key );\r\n				if ( element != null )\r\n					return element.getObjectValue();				\r\n			}\r\n			return null;\r\n		}\r\n		catch (net.sf.ehcache.CacheException e) {\r\n			throw new CacheException( e );\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * Puts an object into the cache.\r\n	 *\r\n	 * @param key   a key\r\n	 * @param value a value\r\n	 * @throws CacheException if the {@link CacheManager}\r\n	 *                        is shutdown or another {@link Exception} occurs.\r\n	 */\r\n	public void update(Object key, Object value) throws CacheException {\r\n		put( key, value );\r\n	}\r\n\r\n	/**\r\n	 * Puts an object into the cache.\r\n	 *\r\n	 * @param key   a key\r\n	 * @param value a value\r\n	 * @throws CacheException if the {@link CacheManager}\r\n	 *                        is shutdown or another {@link Exception} occurs.\r\n	 */\r\n	public void put(Object key, Object value) throws CacheException {\r\n		try {\r\n			Element element = new Element( key, value );\r\n			cache.put( element );\r\n		}\r\n		catch (IllegalArgumentException e) {\r\n			throw new CacheException( e );\r\n		}\r\n		catch (IllegalStateException e) {\r\n			throw new CacheException( e );\r\n		}\r\n		catch (net.sf.ehcache.CacheException e) {\r\n			throw new CacheException( e );\r\n		}\r\n\r\n	}\r\n\r\n	/**\r\n	 * Removes the element which matches the key.\r\n	 * <p/>\r\n	 * If no element matches, nothing is removed and no Exception is thrown.\r\n	 *\r\n	 * @param key the key of the element to remove\r\n	 * @throws CacheException\r\n	 */\r\n	public void remove(Object key) throws CacheException {\r\n		try {\r\n			cache.remove( key );\r\n		}\r\n		catch (IllegalStateException e) {\r\n			throw new CacheException( e );\r\n		}\r\n		catch (net.sf.ehcache.CacheException e) {\r\n			throw new CacheException( e );\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * Remove all elements in the cache, but leave the cache\r\n	 * in a useable state.\r\n	 *\r\n	 * @throws CacheException\r\n	 */\r\n	public void clear() throws CacheException {\r\n		try {\r\n			cache.removeAll();\r\n		}\r\n		catch (IllegalStateException e) {\r\n			throw new CacheException( e );\r\n		}\r\n		catch (net.sf.ehcache.CacheException e) {\r\n			throw new CacheException( e );\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * Remove the cache and make it unuseable.\r\n	 *\r\n	 * @throws CacheException\r\n	 */\r\n	public void destroy() throws CacheException {\r\n		try {\r\n			cache.getCacheManager().removeCache( cache.getName() );\r\n		}\r\n		catch (IllegalStateException e) {\r\n			throw new CacheException( e );\r\n		}\r\n		catch (net.sf.ehcache.CacheException e) {\r\n			throw new CacheException( e );\r\n		}\r\n	}\r\n\r\n}//$Id: EhCacheProvider.java 9964 2006-05-30 15:40:54Z epbernard $\r\n/**\r\n *  Copyright 2003-2006 Greg Luck, Jboss Inc\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the "License");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an "AS IS" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\npackage my.cache;\r\n\r\nimport java.util.Hashtable;\r\n\r\nimport net.sf.ehcache.CacheManager;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * Cache Provider plugin\r\n * \r\n * Taken from EhCache 1.3 distribution\r\n * @author Winter Lau\r\n */\r\npublic class EhCacheProvider implements CacheProvider {\r\n\r\n    private static final Log log = LogFactory.getLog(EhCacheProvider.class);\r\n\r\n	private CacheManager manager;\r\n	private Hashtable<String, EhCache> _CacheManager ;\r\n\r\n    /**\r\n     * Builds a Cache.\r\n     * <p>\r\n     * Even though this method provides properties, they are not used.\r\n     * Properties for EHCache are specified in the ehcache.xml file.\r\n     * Configuration will be read from ehcache.xml for a cache declaration\r\n     * where the name attribute matches the name parameter in this builder.\r\n     *\r\n     * @param name the name of the cache. Must match a cache configured in ehcache.xml\r\n     * @param properties not used\r\n     * @return a newly built cache will be built and initialised\r\n     * @throws CacheException inter alia, if a cache of the same name already exists\r\n     */\r\n    public EhCache buildCache(String name, boolean autoCreate) throws CacheException {\r\n    	EhCache ehcache = _CacheManager.get(name);\r\n    	if(ehcache == null && autoCreate){\r\n		    try {\r\n	            net.sf.ehcache.Cache cache = manager.getCache(name);\r\n	            if (cache == null) {\r\n	                log.warn("Could not find configuration [" + name + "]; using defaults.");\r\n	                manager.addCache(name);\r\n	                cache = manager.getCache(name);\r\n	                log.debug("started EHCache region: " + name);                \r\n	            }\r\n	            synchronized(_CacheManager){\r\n		            ehcache = new EhCache(cache);\r\n		            _CacheManager.put(name, ehcache);\r\n		            return ehcache ;\r\n	            }\r\n		    }\r\n	        catch (net.sf.ehcache.CacheException e) {\r\n	            throw new CacheException(e);\r\n	        }\r\n    	}\r\n        return ehcache;\r\n    }\r\n\r\n	/**\r\n	 * Callback to perform any necessary initialization of the underlying cache implementation\r\n	 * during SessionFactory construction.\r\n	 *\r\n	 * @param properties current configuration settings.\r\n	 */\r\n	public void start() throws CacheException {\r\n		if (manager != null) {\r\n            log.warn("Attempt to restart an already started EhCacheProvider. Use sessionFactory.close() " +\r\n                    " between repeated calls to buildSessionFactory. Using previously created EhCacheProvider." +\r\n                    " If this behaviour is required, consider using net.sf.ehcache.hibernate.SingletonEhCacheProvider.");\r\n            return;\r\n        }\r\n        manager = new CacheManager();\r\n        _CacheManager = new Hashtable<String, EhCache>();\r\n	}\r\n\r\n	/**\r\n	 * Callback to perform any necessary cleanup of the underlying cache implementation\r\n	 * during SessionFactory.close().\r\n	 */\r\n	public void stop() {\r\n		if (manager != null) {\r\n            manager.shutdown();\r\n            manager = null;\r\n        }\r\n	}\r\n}', '缓存, OSCHINA', 'java', 6),
	(105, '[OSChina]RequestContext', 'erhu', '2011-03-01 11:22:29', '2011-04-22 21:19:06', '//RequestContext 这个类在 OSChina 中是非常重要的一个类，该类由全局 Filter 进行初始化，并传递给包括 Action 和 页面中直接使用，使用时通过 RequestContext.get() 来获取当前请求上下文实例。 这个方法主要的功能包括：自动转码、处理文件上传、登录信息处理，以及一些跟请求相关的常用方法封装。 如果你从中发现了什么问题，请不吝赐教。\r\n\r\npackage my.mvc;\r\n\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport java.text.*;\r\nimport java.util.*;\r\n\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.*;\r\n\r\nimport my.util.CryptUtils;\r\nimport my.util.Multimedia;\r\nimport my.util.RequestUtils;\r\nimport my.util.ResourceUtils;\r\nimport net.oschina.beans.User;\r\n\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.beanutils.ConvertUtils;\r\nimport org.apache.commons.beanutils.Converter;\r\nimport org.apache.commons.beanutils.converters.SqlDateConverter;\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.lang.RandomStringUtils;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.apache.commons.lang.math.NumberUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * 请求上下文\r\n * @author Winter Lau\r\n * @date 2010-1-13 下午04:18:00\r\n */\r\npublic class RequestContext {\r\n	\r\n	private final static Log log = LogFactory.getLog(RequestContext.class);\r\n\r\n	private final static int MAX_FILE_SIZE = 10*1024*1024; \r\n	private final static String UTF_8 = "UTF-8";\r\n	\r\n	private final static ThreadLocal<RequestContext> contexts = new ThreadLocal<RequestContext>();\r\n	private final static boolean isResin;\r\n	private final static String upload_tmp_path;\r\n	private final static String TEMP_UPLOAD_PATH_ATTR_NAME = "$OSCHINA_TEMP_UPLOAD_PATH$";\r\n\r\n	private static String webroot = null;\r\n	\r\n	private ServletContext context;\r\n	private HttpSession session;\r\n	private HttpServletRequest request;\r\n	private HttpServletResponse response;\r\n	private Map<String, Cookie> cookies;\r\n	\r\n	static {\r\n		webroot = getWebrootPath();\r\n		isResin = _CheckResinVersion();\r\n		//上传的临时目录\r\n		upload_tmp_path = webroot + "WEB-INF" + File.separator + "tmp" + File.separator;\r\n		try {\r\n			FileUtils.forceMkdir(new File(upload_tmp_path));\r\n		} catch (IOException excp) {}\r\n		\r\n		//BeanUtils对时间转换的初始化设置\r\n		ConvertUtils.register(new SqlDateConverter(null), java.sql.Date.class);\r\n		ConvertUtils.register(new Converter(){\r\n			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-M-d");\r\n			SimpleDateFormat sdf_time = new SimpleDateFormat("yyyy-M-d H:m");\r\n			@SuppressWarnings("rawtypes")\r\n			public Object convert(Class type, Object value) {\r\n				if(value == null) return null;\r\n		        if (value instanceof Date) return (value);\r\n		        try {\r\n		            return sdf_time.parse(value.toString());\r\n		        } catch (ParseException e) {\r\n		            try {\r\n						return sdf.parse(value.toString());\r\n					} catch (ParseException e1) {\r\n						return null;\r\n					}\r\n		        }\r\n			}}, java.util.Date.class);\r\n	}\r\n	\r\n	private final static String getWebrootPath() {\r\n		String root = RequestContext.class.getResource("/").getFile();\r\n		try {\r\n			root = new File(root).getParentFile().getParentFile().getCanonicalPath();\r\n			root += File.separator;\r\n		} catch (IOException e) {\r\n			throw new RuntimeException(e);\r\n		}\r\n		return root;\r\n	}\r\n	\r\n	/**\r\n	 * 初始化请求上下文\r\n	 * @param ctx\r\n	 * @param req\r\n	 * @param res\r\n	 */\r\n	public static RequestContext begin(ServletContext ctx, HttpServletRequest req, HttpServletResponse res) {\r\n		RequestContext rc = new RequestContext();\r\n		rc.context = ctx;\r\n		rc.request = _AutoUploadRequest(_AutoEncodingRequest(req));\r\n		rc.response = res;\r\n		rc.response.setCharacterEncoding(UTF_8);\r\n		rc.session = req.getSession(false);\r\n		rc.cookies = new HashMap<String, Cookie>();\r\n		Cookie[] cookies = req.getCookies();\r\n		if(cookies != null)\r\n			for(Cookie ck : cookies) {\r\n				rc.cookies.put(ck.getName(), ck);\r\n			}\r\n		contexts.set(rc);\r\n		return rc;\r\n	}\r\n\r\n	/**\r\n	 * 返回Web应用的路径\r\n	 * @return\r\n	 */\r\n	public static String root() { return webroot; }\r\n	\r\n	/**\r\n	 * 获取当前请求的上下文\r\n	 * @return\r\n	 */\r\n	public static RequestContext get(){\r\n		return contexts.get();\r\n	}\r\n	\r\n	public void end() {\r\n		String tmpPath = (String)request.getAttribute(TEMP_UPLOAD_PATH_ATTR_NAME);\r\n		if(tmpPath != null){\r\n			try {\r\n				FileUtils.deleteDirectory(new File(tmpPath));\r\n			} catch (IOException e) {\r\n				log.fatal("Failed to cleanup upload directory: " + tmpPath, e);\r\n			}\r\n		}\r\n		this.context = null;\r\n		this.request = null;\r\n		this.response = null;\r\n		this.session = null;\r\n		this.cookies = null;\r\n		contexts.remove();\r\n	}\r\n	\r\n	public Locale locale(){ return request.getLocale(); }\r\n\r\n	public void closeCache(){\r\n        header("Pragma","No-cache");\r\n        header("Cache-Control","no-cache");\r\n        header("Expires", 0L);\r\n	}\r\n	\r\n	/**\r\n	 * 自动编码处理\r\n	 * @param req\r\n	 * @return\r\n	 */\r\n	private static HttpServletRequest _AutoEncodingRequest(HttpServletRequest req) {\r\n		if(req instanceof RequestProxy)\r\n			return req;\r\n		HttpServletRequest auto_encoding_req = req;\r\n		if("POST".equalsIgnoreCase(req.getMethod())){\r\n			try {\r\n				auto_encoding_req.setCharacterEncoding(UTF_8);\r\n			} catch (UnsupportedEncodingException e) {}\r\n		}\r\n		else if(!isResin)\r\n			auto_encoding_req = new RequestProxy(req, UTF_8);\r\n		\r\n		return auto_encoding_req;\r\n	}\r\n	\r\n	/**\r\n	 * 自动文件上传请求的封装\r\n	 * @param req\r\n	 * @return\r\n	 */\r\n	private static HttpServletRequest _AutoUploadRequest(HttpServletRequest req){\r\n		if(_IsMultipart(req)){\r\n			String path = upload_tmp_path + RandomStringUtils.randomAlphanumeric(10);\r\n			File dir = new File(path);\r\n			if(!dir.exists() && !dir.isDirectory())	dir.mkdirs();\r\n			try{\r\n				req.setAttribute(TEMP_UPLOAD_PATH_ATTR_NAME,path);\r\n				return new MultipartRequest(req, dir.getCanonicalPath(), MAX_FILE_SIZE, UTF_8);\r\n			}catch(NullPointerException e){				\r\n			}catch(IOException e){\r\n				log.fatal("Failed to save upload files into temp directory: " + path, e);\r\n			}\r\n		}\r\n		return req;\r\n	}\r\n	\r\n	public long id() {\r\n		return param("id", 0L);\r\n	}\r\n	\r\n	public String ip(){\r\n		return RequestUtils.getRemoteAddr(request);\r\n	}\r\n	\r\n	@SuppressWarnings("unchecked")\r\n	public Enumeration<String> params() {\r\n		return request.getParameterNames();\r\n	}\r\n	\r\n	public String param(String name, String...def_value) {\r\n		String v = request.getParameter(name);\r\n		return (v!=null)?v:((def_value.length>0)?def_value[0]:null);\r\n	}\r\n	\r\n	public long param(String name, long def_value) {\r\n		return NumberUtils.toLong(param(name), def_value);\r\n	}\r\n\r\n	public int param(String name, int def_value) {\r\n		return NumberUtils.toInt(param(name), def_value);\r\n	}\r\n\r\n	public byte param(String name, byte def_value) {\r\n		return (byte)NumberUtils.toInt(param(name), def_value);\r\n	}\r\n\r\n	public String[] params(String name) {\r\n		return request.getParameterValues(name);\r\n	}\r\n\r\n	public long[] lparams(String name){\r\n		String[] values = params(name);\r\n		if(values==null) return null;\r\n		return (long[])ConvertUtils.convert(values, long.class);\r\n	}\r\n	\r\n	public String uri(){\r\n		return request.getRequestURI();\r\n	}\r\n	\r\n	public String contextPath(){\r\n		return request.getContextPath();\r\n	}\r\n	\r\n	public void redirect(String uri) throws IOException {\r\n		response.sendRedirect(uri);\r\n	}\r\n	\r\n	public void forward(String uri) throws ServletException, IOException {\r\n		RequestDispatcher rd = context.getRequestDispatcher(uri);\r\n		rd.forward(request, response);\r\n	}\r\n\r\n	public void include(String uri) throws ServletException, IOException {\r\n		RequestDispatcher rd = context.getRequestDispatcher(uri);\r\n		rd.include(request, response);\r\n	}\r\n	\r\n	public boolean isUpload(){\r\n		return (request instanceof MultipartRequest);\r\n	}\r\n	public File file(String fieldName) {\r\n		if(request instanceof MultipartRequest)\r\n			return ((MultipartRequest)request).getFile(fieldName);\r\n		return null;\r\n	}\r\n	public File image(String fieldname) {\r\n		File imgFile = file(fieldname);	\r\n		return (imgFile!=null&&Multimedia.isImageFile(imgFile.getName()))?imgFile:null;\r\n	}\r\n	\r\n	public boolean isRobot(){\r\n		return RequestUtils.isRobot(request);\r\n	}\r\n\r\n	public ActionException fromResource(String bundle, String key, Object...args){\r\n		String res = ResourceUtils.getStringForLocale(request.getLocale(), bundle, key, args);\r\n		return new ActionException(res);\r\n	}\r\n\r\n	public ActionException error(String key, Object...args){		\r\n		return fromResource("error", key, args);\r\n	}\r\n	\r\n	/**\r\n	 * 输出信息到浏览器\r\n	 * @param msg\r\n	 * @throws IOException\r\n	 */\r\n	public void print(Object msg) throws IOException {\r\n		if(!UTF_8.equalsIgnoreCase(response.getCharacterEncoding()))\r\n			response.setCharacterEncoding(UTF_8);\r\n		response.getWriter().print(msg);\r\n	}\r\n\r\n	public void output_json(String[] key, Object[] value) throws IOException {\r\n		StringBuilder json = new StringBuilder("{");\r\n		for(int i=0;i<key.length;i++){\r\n			if(i>0)\r\n				json.append(\',\');\r\n			boolean isNum = value[i] instanceof Number ;\r\n			json.append("\\"");\r\n			json.append(key[i]);\r\n			json.append("\\":");\r\n			if(!isNum) json.append("\\"");\r\n			json.append(value[i]);\r\n			if(!isNum) json.append("\\"");\r\n		}\r\n		json.append("}");\r\n		print(json.toString());\r\n	}\r\n\r\n	public void output_json(String key, Object value) throws IOException {\r\n		output_json(new String[]{key}, new Object[]{value});\r\n	}\r\n	public void error(int code, String...msg) throws IOException {\r\n		if(msg.length>0)\r\n			response.sendError(code, msg[0]);\r\n		else\r\n			response.sendError(code);\r\n	}\r\n	\r\n	public void forbidden() throws IOException { \r\n		error(HttpServletResponse.SC_FORBIDDEN); \r\n	}\r\n\r\n	public void not_found() throws IOException { \r\n		error(HttpServletResponse.SC_NOT_FOUND); \r\n	}\r\n\r\n	public ServletContext context() { return context; }\r\n	public HttpSession session() { return session; }\r\n	public HttpSession session(boolean create) { \r\n		return (session==null && create)?(session=request.getSession()):session; \r\n	}\r\n	public Object sessionAttr(String attr) {\r\n		HttpSession ssn = session();\r\n		return (ssn!=null)?ssn.getAttribute(attr):null;\r\n	}\r\n	public HttpServletRequest request() { return request; }\r\n	public HttpServletResponse response() { return response; }\r\n	public Cookie cookie(String name) { return cookies.get(name); }\r\n	public void cookie(String name, String value, int max_age, boolean all_sub_domain) {\r\n		RequestUtils.setCookie(request, response, name, value, max_age, all_sub_domain);\r\n	}\r\n	public void deleteCookie(String name,boolean all_domain) { RequestUtils.deleteCookie(request, response, name, all_domain); }\r\n	public String header(String name) { return request.getHeader(name); }\r\n	public void header(String name, String value) { response.setHeader(name, value); }\r\n	public void header(String name, int value) { response.setIntHeader(name, value); }\r\n	public void header(String name, long value) { response.setDateHeader(name, value); }\r\n\r\n	/**\r\n	 * 将HTTP请求参数映射到bean对象中\r\n	 * @param req\r\n	 * @param beanClass\r\n	 * @return\r\n	 * @throws Exception\r\n	 */\r\n	public <T> T form(Class<T> beanClass) {\r\n		try{\r\n			T bean = beanClass.newInstance();\r\n			BeanUtils.populate(bean, request.getParameterMap());\r\n			return bean;\r\n		}catch(Exception e) {\r\n			throw new ActionException(e.getMessage());\r\n		}\r\n	}\r\n	\r\n	/**\r\n	 * 返回当前登录的用户资料\r\n	 * @return\r\n	 */\r\n	public IUser user() {\r\n		return User.GetLoginUser(request);\r\n	}\r\n	\r\n	/**\r\n	 * 保存登录信息\r\n	 * @param req\r\n	 * @param res\r\n	 * @param user\r\n	 * @param save\r\n	 */\r\n	public void saveUserInCookie(IUser user, boolean save) {\r\n		String new_value = _GenLoginKey(user, ip(), header("user-agent"));\r\n		int max_age = save ? MAX_AGE : -1;\r\n		deleteCookie(COOKIE_LOGIN, true);\r\n		cookie(COOKIE_LOGIN,new_value,max_age,true);\r\n	}\r\n\r\n	public void deleteUserInCookie() {\r\n		deleteCookie(COOKIE_LOGIN, true);\r\n	}\r\n	\r\n	/**\r\n	 * 3.0 以上版本的 Resin 无需对URL参数进行转码\r\n	 * @return\r\n	 */\r\n	private final static boolean _CheckResinVersion() {\r\n		try{\r\n			Class<?> verClass = Class.forName("com.caucho.Version");\r\n			String ver = (String)verClass.getDeclaredField("VERSION").get(verClass);\r\n			String mainVer = ver.substring(0, ver.lastIndexOf(\'.\'));\r\n			/**\r\n			float fVer = Float.parseFloat(mainVer);\r\n			System.out.println("----------------> " + fVer);\r\n			*/\r\n			return Float.parseFloat(mainVer) > 3.0;\r\n		}catch(Throwable t) {}\r\n		return false;\r\n	}\r\n\r\n\r\n	/**\r\n	 * 自动解码\r\n	 * @author liudong\r\n	 */\r\n	private static class RequestProxy extends HttpServletRequestWrapper {\r\n		private String uri_encoding; \r\n		RequestProxy(HttpServletRequest request, String encoding){\r\n			super(request);\r\n			this.uri_encoding = encoding;\r\n		}\r\n		\r\n		/**\r\n		 * 重载getParameter\r\n		 */\r\n		public String getParameter(String paramName) {\r\n			String value = super.getParameter(paramName);\r\n			return _DecodeParamValue(value);\r\n		}\r\n\r\n		/**\r\n		 * 重载getParameterMap\r\n		 */\r\n		@SuppressWarnings({ "unchecked", "rawtypes" })\r\n		public Map<String, Object> getParameterMap() {\r\n			Map params = super.getParameterMap();\r\n			HashMap<String, Object> new_params = new HashMap<String, Object>();\r\n			Iterator<String> iter = params.keySet().iterator();\r\n			while(iter.hasNext()){\r\n				String key = (String)iter.next();\r\n				Object oValue = params.get(key);\r\n				if(oValue.getClass().isArray()){\r\n					String[] values = (String[])params.get(key);\r\n					String[] new_values = new String[values.length];\r\n					for(int i=0;i<values.length;i++)\r\n						new_values[i] = _DecodeParamValue(values[i]);\r\n					\r\n					new_params.put(key, new_values);\r\n				}\r\n				else{\r\n					String value = (String)params.get(key);\r\n					String new_value = _DecodeParamValue(value);\r\n					if(new_value!=null)\r\n						new_params.put(key,new_value);\r\n				}\r\n			}\r\n			return new_params;\r\n		}\r\n\r\n		/**\r\n		 * 重载getParameterMap\r\n		 */\r\n		@SuppressWarnings({ "unchecked", "rawtypes" })\r\n		public Map<String, Object> getParameterMap() {\r\n			Map params = super.getParameterMap();\r\n			HashMap<String, Object> new_params = new HashMap<String, Object>();\r\n			Iterator<String> iter = params.keySet().iterator();\r\n			while(iter.hasNext()){\r\n				String key = (String)iter.next();\r\n				Object oValue = params.get(key);\r\n				if(oValue.getClass().isArray()){\r\n					String[] values = (String[])params.get(key);\r\n					String[] new_values = new String[values.length];\r\n					for(int i=0;i<values.length;i++)\r\n						new_values[i] = _DecodeParamValue(values[i]);\r\n					\r\n					new_params.put(key, new_values);\r\n				}\r\n				else{\r\n					String value = (String)params.get(key);\r\n					String new_value = _DecodeParamValue(value);\r\n					if(new_value!=null)\r\n						new_params.put(key,new_value);\r\n				}\r\n			}\r\n			return new_params;\r\n		}\r\n\r\n		/**\r\n		 * 重载getParameterValues\r\n		 */\r\n		public String[] getParameterValues(String arg0) {\r\n			String[] values = super.getParameterValues(arg0);\r\n			for(int i=0;values!=null&&i<values.length;i++)\r\n				values[i] = _DecodeParamValue(values[i]);\r\n			return values;\r\n		}\r\n\r\n		/**\r\n		 * 参数转码\r\n		 * @param value\r\n		 * @return\r\n		 */\r\n		private String _DecodeParamValue(String value){\r\n			if (StringUtils.isBlank(value) || StringUtils.isBlank(uri_encoding)\r\n					|| StringUtils.isNumeric(value))\r\n				return value;		\r\n			try{\r\n				return new String(value.getBytes("8859_1"), uri_encoding);\r\n			}catch(Exception e){}\r\n			return value;\r\n		}\r\n\r\n	}\r\n	\r\n	private static boolean _IsMultipart(HttpServletRequest req) {\r\n		return ((req.getContentType() != null) && (req.getContentType()\r\n				.toLowerCase().startsWith("multipart")));\r\n	}\r\n\r\n	/**\r\n	 * 生成用户登录标识字符串\r\n	 * @param user\r\n	 * @param ip\r\n	 * @param user_agent\r\n	 * @return\r\n	 */\r\n	public static String _GenLoginKey(IUser user, String ip, String user_agent) {\r\n		StringBuilder sb = new StringBuilder();\r\n		sb.append(user.getId());\r\n		sb.append(\'|\');\r\n		sb.append(user.getPwd());\r\n		sb.append(\'|\');\r\n		sb.append(ip);\r\n		sb.append(\'|\');\r\n		sb.append((user_agent==null)?0:user_agent.hashCode());\r\n		sb.append(\'|\');\r\n		sb.append(System.currentTimeMillis());\r\n		return _Encrypt(sb.toString());	\r\n	}\r\n\r\n	/**\r\n	 * 加密\r\n	 * @param value\r\n	 * @return \r\n	 * @throws Exception \r\n	 */\r\n	private static String _Encrypt(String value) {\r\n		byte[] data = CryptUtils.encrypt(value.getBytes(), E_KEY);\r\n		try{\r\n			return URLEncoder.encode(new String(Base64.encodeBase64(data)), UTF_8);\r\n		}catch(UnsupportedEncodingException e){\r\n			return null;\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 解密\r\n	 * @param value\r\n	 * @return\r\n	 * @throws Exception \r\n	 */\r\n	private static String _Decrypt(String value) {\r\n		try {\r\n			value = URLDecoder.decode(value,UTF_8);\r\n			if(StringUtils.isBlank(value)) return null;\r\n			byte[] data = Base64.decodeBase64(value.getBytes());\r\n			return new String(CryptUtils.decrypt(data, E_KEY));\r\n		} catch (UnsupportedEncodingException excp) {\r\n			return null;\r\n		}\r\n	}	\r\n\r\n	/**\r\n	 * 从cookie中读取保存的用户信息\r\n	 * @param req\r\n	 * @return\r\n	 */\r\n	public IUser getUserFromCookie() {\r\n		try{\r\n			Cookie cookie = cookie(COOKIE_LOGIN);\r\n			if(cookie!=null && StringUtils.isNotBlank(cookie.getValue())){\r\n				return userFromUUID(cookie.getValue());\r\n			}\r\n		}catch(Exception e){}\r\n		return null;\r\n	}\r\n\r\n	/**\r\n	 * 从cookie中读取保存的用户信息\r\n	 * @param req\r\n	 * @return\r\n	 */\r\n	public IUser userFromUUID(String uuid) {\r\n		if(StringUtils.isBlank(uuid))\r\n			return null;\r\n		String ck = _Decrypt(uuid);\r\n		final String[] items = StringUtils.split(ck, \'|\');\r\n		if(items.length == 5){\r\n			String ua = header("user-agent");\r\n			int ua_code = (ua==null)?0:ua.hashCode();\r\n			int old_ua_code = Integer.parseInt(items[3]);\r\n			if(ua_code == old_ua_code){\r\n				return new IUser(){\r\n					public boolean IsBlocked() { return false; }\r\n					public long getId() { return NumberUtils.toLong(items[0],-1L); }\r\n					public String getPwd() { return items[1]; }\r\n					public byte getRole() { return IUser.ROLE_GENERAL; }\r\n				};\r\n			}\r\n		}\r\n		return null;\r\n	}\r\n	\r\n	public final static String COOKIE_LOGIN = "oscid";\r\n	private final static int MAX_AGE = 86400 * 365;\r\n	private final static byte[] E_KEY = new byte[]{\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\'};\r\n}', 'OSChina', 'java', 5),
	(106, '[oschina] 生成验证码', 'erhu', '2011-03-01 11:27:02', '2011-03-01 11:27:20', '//调用方法 if(!ImageCaptchaService.validate(ctx.request())) \r\npackage my.img;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.util.Random;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport my.cache.CacheManager;\r\nimport my.mvc.RequestContext;\r\nimport my.util.RequestUtils;\r\n\r\nimport org.apache.commons.lang.RandomStringUtils;\r\nimport org.apache.commons.lang.StringUtils;\r\n\r\n//import com.jhlabs.image.*;\r\n\r\n/**\r\n * 图形验证码\r\n * @author liudong\r\n */\r\npublic class ImageCaptchaService {\r\n\r\n	private final static String CACHE_REGION = "session";\r\n	private final static String COOKIE_NAME = "_reg_key_"; \r\n	private static int WIDTH = 120;\r\n	private static int HEIGHT = 40;\r\n	private static int LENGTH = 5;\r\n	private final static Random random = new Random();\r\n\r\n	/**\r\n	 * 生成验证码\r\n	 * @param req\r\n	 * @param res\r\n	 * @throws IOException \r\n	 */\r\n	public static void get(RequestContext ctx) throws IOException{\r\n		if(ctx.isRobot()){\r\n			ctx.forbidden();\r\n			return;\r\n		}\r\n		ctx.closeCache();\r\n        ctx.response().setContentType("image/png");\r\n        _Render(_GenerateRegKey(ctx), ctx.response().getOutputStream(), WIDTH, HEIGHT);\r\n	}\r\n	\r\n	/**\r\n	 * 检查验证码是否正确\r\n	 * @param req\r\n	 * @return\r\n	 */\r\n	public static boolean validate(HttpServletRequest req) {\r\n		Cookie cke = RequestUtils.getCookie(req, COOKIE_NAME);\r\n		if(cke == null) {\r\n			String ssnId = req.getSession().getId();\r\n			String code1 = CacheManager.get(String.class, CACHE_REGION, ssnId);\r\n			String code2 = req.getParameter("verifyCode");\r\n			return StringUtils.equalsIgnoreCase(code1, code2);\r\n		}\r\n		if(cke!=null && StringUtils.isNotBlank(cke.getValue())){\r\n			String key = cke.getValue();\r\n			String code1 = CacheManager.get(String.class, CACHE_REGION, key);\r\n			String code2 = req.getParameter("verifyCode");\r\n			return StringUtils.equalsIgnoreCase(code1, code2);\r\n		}\r\n		return false;		\r\n	}\r\n	\r\n	private static String _GenerateRegKey(RequestContext ctx) {\r\n		Cookie cke = ctx.cookie(COOKIE_NAME);\r\n		String REG_VALUE = null;\r\n		if(cke==null||StringUtils.isBlank(cke.getValue())){\r\n			REG_VALUE = RandomStringUtils.randomAlphanumeric(20);\r\n			ctx.cookie(COOKIE_NAME, REG_VALUE, 3600, true);\r\n		}\r\n		else\r\n			REG_VALUE = cke.getValue();\r\n		String code = RandomStringUtils.randomAlphanumeric(LENGTH).toUpperCase();\r\n		code.replace(\'0\', \'W\');\r\n		code.replace(\'o\', \'R\');\r\n		code.replace(\'I\', \'E\');\r\n		code.replace(\'1\', \'T\');\r\n		CacheManager.set(CACHE_REGION, REG_VALUE, code);\r\n		if(ctx.session()!=null){\r\n			CacheManager.set(CACHE_REGION, ctx.session().getId(), code);\r\n		}\r\n		return code;\r\n	}\r\n	\r\n    /**\r\n     * 画随机码图\r\n     * @param text\r\n     * @param out\r\n     * @param width\r\n     * @param height\r\n     * @throws IOException\r\n     */\r\n    private static void _Render(String text, OutputStream out, int width, int height) throws IOException {\r\n	    BufferedImage bi = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);        \r\n	    Graphics2D g = (Graphics2D)bi.getGraphics();\r\n	    \r\n	    g.setColor(Color.WHITE);\r\n	    g.fillRect(0,0,width,height);\r\n    	//g.setColor(Color.RED);\r\n	    //g.drawRect(1,1,width-2,height-2);\r\n	    for(int i=0;i<10;i++){\r\n	    	g.setColor(_GetRandColor(150, 250));\r\n	    	g.drawOval(random.nextInt(110), random.nextInt(24), 5+random.nextInt(10), 5+random.nextInt(10));\r\n	    }\r\n	    Font mFont = new Font("Arial", Font.ITALIC, 28);\r\n	    g.setFont(mFont);\r\n	    g.setColor(_GetRandColor(10,240));\r\n	    g.drawString(text, 10, 30);\r\n	    ImageIO.write(bi, "png", out);\r\n    }\r\n    \r\n    private static Color _GetRandColor(int fc,int bc){//给定范围获得随机颜色\r\n		if (fc > 255) fc = 255;\r\n		if (bc > 255) bc = 255;\r\n		int r = fc + random.nextInt(bc - fc);\r\n		int g = fc + random.nextInt(bc - fc);\r\n		int b = fc + random.nextInt(bc - fc);\r\n		return new Color(r, g, b);\r\n	}\r\n\r\n    public static void main(String[] args) throws IOException {\r\n		String code = RandomStringUtils.randomAlphanumeric(LENGTH).toUpperCase();\r\n		code = code.replace(\'0\', \'W\');\r\n		code = code.replace(\'o\', \'R\');\r\n		code = code.replace(\'I\', \'E\');\r\n		code = code.replace(\'1\', \'T\');\r\n		\r\n    	FileOutputStream out = new FileOutputStream("d:\\\\aa.jpg");\r\n    	_Render(code,out,120,40);\r\n    }\r\n}', '', 'java', 14),
	(107, 'ThreadLocal示例', 'erhu', '2011-03-01 17:06:46', '2011-03-01 17:19:35', 'import java.util.logging.*;\r\n\r\nclass SimpleThreadLogger {\r\n\r\n	private static final java.lang.ThreadLocal<Logger> threadLocal = new java.lang.ThreadLocal<Logger>();\r\n\r\n	public static void log(String msg) {\r\n		getThreadLogger().log(Level.INFO, msg);\r\n	}\r\n\r\n	private static Logger getThreadLogger() {\r\n		Logger logger = threadLocal.get();// 以线程为key，返回Logger对象。\r\n\r\n		if (logger == null) {\r\n			try {\r\n				logger = Logger.getLogger(Thread.currentThread().getName());\r\n				// 输出日志信息到文件\r\n				logger.addHandler(new FileHandler(Thread.currentThread().getName() + ".log"));\r\n			} catch (Exception e) {\r\n				e.printStackTrace();\r\n			}\r\n			threadLocal.set(logger);// 为每一个线程创建一个资源副本\r\n		}\r\n		return logger;\r\n	}\r\n}\r\n\r\npublic class LoggerTest {\r\n\r\n	public static void main(String[] args) {\r\n		new TThread("thread1").start(); \r\n		new TThread("thread2").start();\r\n		new TThread("thread3").start();\r\n	}\r\n}\r\n\r\nclass TThread extends Thread {\r\n\r\n	public TThread(String name) {\r\n		super(name);\r\n	}\r\n\r\n	public void run() {\r\n		for (int i= 0; i < 10; i ++) {\r\n			SimpleThreadLogger.log(getName() + ": message " + i);\r\n			try {\r\n				Thread.sleep(1000);\r\n			} catch (Exception e) {e.printStackTrace();}\r\n		}\r\n	}\r\n}', 'java, ThreadLoacl', 'java', 3),
	(108, '让ie6崩溃的代码', 'erhu', '2011-03-16 22:04:16', '2011-03-24 14:53:27', 'JAVASCRIPT:\r\n/**\r\n* jQuery Crash (http://mktgdept.com/jquery-crash)\r\n* A jQuery plugin to crash IE6.\r\n*\r\n* v0.0.2 - 5 March 2010\r\n*\r\n* Copyright (c) 2009 Chad Smith (http://twitter.com/chadsmith)\r\n* Dual licensed under the MIT and GPL licenses.\r\n* http://www.opensource.org/licenses/mit-license.php\r\n* http://www.opensource.org/licenses/gpl-license.php\r\n*\r\n* Use $.crash();\r\n*\r\n**/\r\n;jQuery.crash=function(x){for(x in document.open);};', 'ie', 'js', 15),
	(109, 'XOR加密', 'erhu', '2011-03-21 09:26:46', '2011-03-24 15:16:13', 'package com.test;\r\n\r\npublic class Test {\r\n	public static void main(String[] args) {\r\n		 \r\n		System.out.println(new Test().setPwd(new Test().setPwd("a\'c4s6	s3sds", "1\'3e"), "1\'3e"));\r\n\r\n	}\r\n/**\r\n * 使用XOR运算加密:对str的每个字符,使用key的每个字符循环做xor运算.\r\n * \r\n * 相对于其他的简易加密算法，XOR算法的优点如下\r\n　　(1)算法简单，对于高级语言很容易能实现。\r\n　　(2)速度快，可以在任何时候、任何地方使用。\r\n　　(3)对任何字符都是有效的，不像有些简易加密算法，只对西文字符有效，对中文加密后再解密无法还原为原来的字符。\r\n\r\n   在用户登录的时候，有以下两种方式来验证合法用户\r\n　　(1)根据其提交的用户名(明文)和密码(密钥)信息重新加密，并使用加密后的信息与数据库中存储的密码信息进行比较，如果相等，则用户合法，否则，为非法用户。\r\n\r\n　　(2)根据数据库中存储的密码信息(明文)和用户输入的密码(密钥)信息进行解密，并把加密后的信息与用户提交的用户名进行比较，如果相等，则用户合法，否则，为非法用户。\r\n\r\n\r\n * @param str\r\n * @param key\r\n * @return\r\n */\r\n	public String setPwd(String str/* 明文 */, String key/* 密钥 */) {\r\n\r\n		char[] temp1 = str.toCharArray();\r\n		char[] temp2 = key.toCharArray();\r\n		String result = "";\r\n		StringBuilder res2 = new StringBuilder();\r\n		// ===============================\r\n		for(int i = 0; i < temp1.length; i ++){\r\n			for(int j = 0; j < temp2.length; j ++){\r\n				//System.out.println(temp1[i] + "("+(int)temp1[i]+") --- "+ temp2[j] + "("+(int)temp2[j]+")");\r\n				temp1[i] =(char)(temp1[i] ^ temp2[j]);\r\n			}\r\n			res2.append(temp1[i]);\r\n		}\r\n		return res2.toString();\r\n	}\r\n}', '', 'java', 24),
	(110, 'scala版有理数类Rational', 'erhu', '2011-04-02 15:54:04', NULL, '/**\r\n * 有理数\r\n */\r\nclass Rational(n: Int, d: Int) {\r\n	// 检查先决条件,分母不可为0\r\n	require(d != 0)\r\n\r\n	// 求最大公约数\r\n	private val g = gcd(n.abs, d.abs)\r\n\r\n	// numerator分子,不可直接访问that.n,因为n不是Rational的属性\r\n	// 默认访问权限为public\r\n	val numer = n / g\r\n\r\n	// denominator分母\r\n	val denom = d / g\r\n\r\n	// auxiliary constructor辅助构造器\r\n	def this(n: Int) = this(n, 1)\r\n\r\n\r\n	def + (that: Rational): Rational = {\r\n		new Rational(\r\n			this.numer * that.denom + that.numer * denom ,\r\n			denom * that.denom\r\n		)\r\n	}\r\n	def + (i: Int): Rational = {\r\n		new Rational(numer + i * denom , denom)\r\n	}\r\n\r\n	def - (that: Rational): Rational = {\r\n		new Rational(\r\n			numer * that.denom - that.numer * denom ,\r\n			denom * that.denom\r\n		)\r\n	}\r\n\r\n	def - (i: Int): Rational = {\r\n		new Rational(\r\n			numer - i * denom ,denom\r\n		)\r\n	}\r\n\r\n	def * (that: Rational): Rational = {\r\n		new Rational(numer * that.numer, denom * that.denom)\r\n	}\r\n	def * (i: Int): Rational = {\r\n		new Rational(numer * i, denom)\r\n	}\r\n\r\n	def / (that: Rational): Rational = {\r\n		new Rational(numer * that.denom, denom * that.numer)\r\n	}\r\n	def / (i: Int): Rational = {\r\n		new Rational(numer, denom * i)\r\n	}\r\n	// 重载方法\r\n	override def toString = numer + "/" + denom\r\n\r\n	private def gcd(a: Int, b: Int): Int = {\r\n		if (b == 0) a else gcd(b, a % b)\r\n	}\r\n}\r\n// test\r\nobject Rational {\r\n	def main(args: Array[String]) {\r\n		val a = new Rational(2, 6)\r\n		val b = new Rational(1, 4)\r\n		println(a + " + " + b + " = " + (a + b))\r\n		println(a + " - " + b + " = " + (a - b))\r\n		println(a + " * " + b + " = " + (a * b))\r\n		println(a + " / " + b + " = " + (a / b))\r\n	}\r\n}', 'scala, 有理数', 'scala', 5),
	(111, '几个常用字符串hash算法的node封装', 'erhu', '2011-04-05 13:56:07', '2011-04-05 13:57:49', '// hash.js\r\n\r\nexports.additive = function (key, prime) {\r\n\r\n    key = key instanceof Buffer ? key : new Buffer(key);\r\n\r\n    prime = prime == undefined ? 0xffffffff : prime;\r\n\r\n    for (var hash = key.length, i = 0; i < key.length; i++) {\r\n\r\n        hash += key[i];\r\n\r\n    }\r\n\r\n    return (hash % prime);\r\n\r\n}\r\n\r\n\r\nexports.rotating = function(key) {\r\n\r\n    key = key instanceof Buffer ? key : new Buffer(key);\r\n\r\n    for (var hash = key.length, i = 0; i < key.length; ++i) {\r\n\r\n        hash = (hash << 4) ^ (hash >> 28) ^ key[i];\r\n\r\n    }\r\n\r\n    return hash;\r\n\r\n}\r\n\r\n\r\nexports.bernstein = function(key, prime) {\r\n\r\n    key = key instanceof Buffer ? key : new Buffer(key);\r\n\r\n    prime = prime == undefined ? 0xffffffff : prime;\r\n\r\n    var hash = 0;\r\n\r\n    for (i = 0; i < key.length; ++i) {\r\n\r\n        hash = (hash << 5 + hash) + key[i];\r\n\r\n    }\r\n\r\n    return hash;\r\n\r\n}\r\n\r\n\r\nexports.fnv = function (key) {\r\n\r\n    key = key instanceof Buffer ? key : new Buffer(key);\r\n\r\n    var p = 16777619, hash = 0x811C9DC5;\r\n\r\n    for (var i = 0; i < key.length; i++) {\r\n\r\n        hash = (hash * p) ^ key[i];\r\n\r\n    }\r\n\r\n    hash += hash << 13;\r\n\r\n    hash ^= hash >> 7;\r\n\r\n    hash += hash << 3;\r\n\r\n    hash ^= hash >> 17;\r\n\r\n    hash += hash << 5;\r\n\r\n    return hash;\r\n\r\n}\r\n\r\n\r\nexports.fnv1a = function (key) {\r\n\r\n    key = key instanceof Buffer ? key : new Buffer(key);\r\n\r\n    var p = 16777619, hash = 0x811C9DC5;\r\n\r\n    for (var i = 0; i < key.length; i++) {\r\n\r\n        hash = (hash ^ key[i]) * p;\r\n\r\n    }\r\n\r\n    hash += hash << 13;\r\n\r\n    hash ^= hash >> 7;\r\n\r\n    hash += hash << 3;\r\n\r\n    hash ^= hash >> 17;\r\n\r\n    hash += hash << 5;\r\n\r\n    return hash;\r\n\r\n}', 'nodejs, hash', 'js', 7),
	(112, '大数加、乘法', 'erhu', '2011-04-06 11:06:54', '2011-05-04 20:55:13', 'package algorithms.BigInt;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 任意位数的数组相加\r\n * Created by IntelliJ IDEA.\r\n * User: Erhu\r\n * Date: 11-4-6\r\n * Time: 上午9:03\r\n * To change this template use File | Settings | File Templates.\r\n */\r\npublic class BigInt {\r\n    public static void main(String[] args) {\r\n        int[] arr1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 3, 4, 5, 6};\r\n        int[] arr2 = {2, 3, 4, 5, 3, 5};\r\n        int[] sum = add(arr1, arr2);\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(Arrays.toString(arr1).replace(", ", "").replace("[", "").replace("]", ""));\r\n        sb.append(" + ");\r\n        sb.append(Arrays.toString(arr2).replace(", ", "").replace("[", "").replace("]", ""));\r\n        sb.append(" = ");\r\n        sb.append(Arrays.toString(sum).replace(", ", "").replace(", ", "").replace("[", "").replace("]", ""));\r\n        System.out.println(sb.toString());\r\n\r\n        int[] time_res = multiply(arr1, arr2);\r\n        sb.setLength(0);;\r\n        sb.append(Arrays.toString(arr1).replace(", ", "").replace("[", "").replace("]", ""));\r\n        sb.append(" * ");\r\n        sb.append(Arrays.toString(arr2).replace(", ", "").replace("[", "").replace("]", ""));\r\n        sb.append(" = ");\r\n        sb.append(Arrays.toString(time_res).replace(", ", "").replace(", ", "").replace("[", "").replace("]", ""));\r\n        System.out.println(sb.toString());\r\n    }\r\n\r\n    /**\r\n     * 对齐数组长度到_length（左补0）\r\n     *\r\n     * @param _arr\r\n     * @param _length\r\n     * @return\r\n     */\r\n    private static int[] orderArr(int[] _arr, int _length) {\r\n        int[] tgt_arr = new int[_length];\r\n        System.arraycopy(_arr, 0, tgt_arr, _length - _arr.length, _arr.length);\r\n        return tgt_arr;\r\n    }\r\n\r\n    private static int[] add(int[] a, int[] b) {\r\n        // 对齐数组\r\n        if (a.length > b.length)\r\n            b = orderArr(b, a.length);\r\n        else if (a.length < b.length)\r\n            a = orderArr(a, b.length);\r\n        // 逐位相加\r\n        int[] sum = new int[a.length + 1];\r\n        int position = a.length;\r\n        int carry = 0;\r\n        while (--position >= 0) {\r\n            int total = a[position] + b[position] + carry;\r\n            if (total > 9) {\r\n                sum[position + 1] = total - 10;\r\n                carry = 1;\r\n            } else {\r\n                sum[position + 1] = total;\r\n                carry = 0;\r\n            }\r\n        }\r\n        sum[0] = carry;\r\n        return sum;\r\n    }\r\n\r\n    private static int[] multiply(int[] a, int[] b) {\r\n        // 对齐数组\r\n        if (a.length > b.length)\r\n            b = orderArr(b, a.length);\r\n        else if (a.length < b.length)\r\n            a = orderArr(a, b.length);\r\n        int[] result = new int[a.length + b.length];\r\n        int position = result.length - 1;\r\n        for (int i = a.length - 1; i >= 0; i--) {\r\n            int off = (a.length - 1) - i;\r\n            for (int j = b.length - 1; j >= 0; j--, off++) {\r\n                int apple = a[i] * b[j];\r\n                result[position - off] += apple % 10;\r\n                result[position - off - 1] += apple / 10 + result[position - off] / 10;\r\n                result[position - off] %= 10;\r\n                /*result[position - off] += apple % 10;\r\n                if (result[position - off] > 9) {\r\n                    result[position - off - 1]++;\r\n                    result[position - off] %= 10;\r\n                }\r\n                result[position - off - 1] += apple / 10;\r\n                if (result[position - off - 1] > 9) {\r\n                    result[position - off - 2]++;\r\n                    result[position - off - 1] %= 10;\r\n                }*/\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}', 'java, 大数', 'java', 16),
	(114, '使用js检测服务器是否已经打开', 'erhu', '2011-04-07 17:25:50', '2011-04-07 17:26:54', '// 只对IE有效\r\nfunction load(){  \r\n    var oRequest = new ActiveXObject(\'Microsoft.XMLHTTP\');\r\n    try{\r\n	  oRequest.open(\'get\', \'http://portal.dhc.com.cn\', false);\r\n	  oRequest.send(null);\r\n	  alert("服务器已经打开，status is " + oRequest.status);\r\n    } catch(e) {\r\n		  alert(\'服务器未打开\');  \r\n    }\r\n}', 'js', 'js', 13),
	(115, '直接插入排序', 'erhu', '2011-04-10 16:40:53', '2011-05-03 17:27:46', 'package algorithm.sort;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 直接插入排序\r\n * <p/>\r\n * 适应环境：小数据量，且基本有序的数据\r\n * 时间复杂度：O(n平方)=(n*(n-1))/2 =每个元素的比较次数构成的等差数列求和{0, 1, 2, n-1}\r\n * 稳定性：稳定\r\n * 最好情况：数据有序O(n)\r\n * 最坏情况：数据逆序O(N平方)\r\n * 空间复杂度：O(1)\r\n *\r\n * @author erhu\r\n * @version 1.0, 22th Feb 2011\r\n */\r\npublic class InsertSort {\r\n    public static void main(String[] args) {\r\n        int[] arr = {1, 4, 54, 61, 12, 544, 199};\r\n        sort(arr);\r\n        System.out.println(Arrays.toString(arr));\r\n    }\r\n\r\n    /**\r\n     * 对每个元素执行插入排序\r\n     *\r\n     * @param _arr 待排序数组\r\n     */\r\n    public static void sort(int[] _arr) {\r\n        // 假设数据基本有序，从后往前比较（这也是应该使用插入排序的情景）。\r\n        for (int index = _arr.length - 1; index > 0; index--)// END at _arr[1]\r\n            insert(_arr, index);\r\n    }\r\n\r\n    /**\r\n     * 对某个元素执行插入排序\r\n     *\r\n     * @param _arr   源数组\r\n     * @param _index 待插入元素的索引\r\n     */\r\n    public static void insert(int[] _arr, int _index) {\r\n        int backwardIndex = _index - 1;\r\n        int currentValue = _arr[_index];\r\n        while (backwardIndex >= 0 && _arr[backwardIndex] > currentValue)// 从当前元素往前比较，直到找到一个不大于currentValue的元素，\r\n            _arr[backwardIndex + 1] = _arr[backwardIndex--];\r\n        _arr[backwardIndex + 1] = currentValue;// 把currentValue插在这个元素后面。\r\n    }\r\n}', '排序', 'java', 33),
	(116, '选择排序', 'erhu', '2011-04-20 15:42:07', '2011-05-03 17:07:27', 'package algorithm.sort;\r\n\r\nimport basic.util.Tool;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.GregorianCalendar;\r\n\r\n/**\r\n * 选择排序\r\n * 时间复杂度：O(n平方)=(n-1)(1 + n -1)/2:等差数列求和、\r\n * 空间复杂度：O(1)\r\n * 稳定性：不稳定\r\n */\r\npublic class SelectSort {\r\n    public static void main(String[] args) {\r\n        int[] arr = {1, 4, 2, 3, 45, 32, 1243, 39, 21};\r\n        sort(arr);\r\n        System.out.println(Arrays.toString(arr));\r\n        int[] arr2 = {1, 4, 2, 3, 45, 32, 1243, 39, 21};\r\n        sort_v2(arr2);\r\n        System.out.println(Arrays.toString(arr2));\r\n\r\n    }\r\n\r\n    /**\r\n     * 直接选择排序，每趟可能交换N次\r\n     */\r\n    public static void sort(int[] _arr) {\r\n        for (int i = 0; i < _arr.length - 1; i++) {// n-1次\r\n            for (int j = i + 1; j < _arr.length; j++)// 外层循环元素逐个与内层循环元素比较\r\n                if (_arr[i] > _arr[j])\r\n                    Tool.swap(_arr, i, j);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 选择排序，每趟最多只交换1次\r\n     */\r\n    public static void sort_v2(int[] _arr) {\r\n        for (int i = 0; i < _arr.length - 1; i++) {\r\n            int min_pos = i;// 标记最小元素的位置为外层循环的索引\r\n            for (int j = i + 1; j < _arr.length; j++)\r\n                if (_arr[min_pos] > _arr[j])\r\n                    min_pos = j;\r\n            if (i != min_pos)// 若最小元素位置发生变化，交换真正最小元素的位置到外层索引处\r\n                Tool.swap(_arr, i, min_pos);\r\n        }\r\n    }\r\n}', '排序', 'java', 10),
	(117, '堆排序', 'erhu', '2011-04-20 17:35:51', '2011-05-03 18:52:17', 'package algorithm.sort;\r\n\r\nimport basic.util.Tool;\r\nimport junit.framework.TestCase;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 堆排序 V2\r\n * 时间复杂度：O(n * lg(n))=((n - 1) + n / 2) * lg(n)[最好/最坏/平均]\r\n * 稳定性：不稳定\r\n * <p/>\r\n * 描述：1、建一次堆；(n / 2) * lg(n)\r\n * 2、交换堆顶元素到最后；\r\n * 3、对剩下的元素再建堆（递归）；(n - 1) * lg(n)\r\n */\r\npublic class HeapSort2 extends TestCase {\r\n\r\n    /**\r\n     * 测试函数\r\n     */\r\n    public void testSort() {\r\n        int[] arr = {1, 42, 221, 3, 45, 32, 1243, 39, 21};\r\n        // 第一次建堆，将最大元素移到顶部，耗时(n / 2) * lg(n)次；\r\n        buildHeap(arr);\r\n        // 循环建堆，耗时(n - 1) * lg(n)次\r\n        for (int index = arr.length - 1; index > 0; index--) {\r\n            Tool.swap(arr, index, 0);// 将堆顶元素交换到后面\r\n            heapfy(arr, 0, index);// 以第一个元素为根，再递归建堆，耗时(lg(n)次)\r\n        }\r\n        System.out.println(Arrays.toString(arr));\r\n    }\r\n\r\n    /**\r\n     * 从最后一个非叶子节点开始，向前循环建堆，找到第一大元素放在堆顶\r\n     *\r\n     * @param _arr 源数组\r\n     */\r\n    private void buildHeap(int[] _arr) {\r\n        // 从最后一个非叶子节点开始\r\n        for (int index = _arr.length / 2 - 1; index >= 0; index--)\r\n            heapfy(_arr, index, _arr.length);\r\n    }\r\n\r\n    /**\r\n     * 以_index为父节点建堆（动词）\r\n     *\r\n     * @param _arr       life is good:-)\r\n     * @param _index     当前位置\r\n     * @param _lastIndex 参与比较的最后一个元素的索引\r\n     */\r\n    private void heapfy(int[] _arr, int _index, int _lastIndex) {\r\n        int maxIndex = _index;\r\n        int leftChildIndex = _index * 2 + 1;\r\n        int rightChildIndex = leftChildIndex + 1;\r\n\r\n        if (leftChildIndex < _lastIndex && _arr[leftChildIndex] > _arr[_index])// 有左孩子，且左孩子较大\r\n            maxIndex = leftChildIndex;\r\n        if (rightChildIndex < _lastIndex && _arr[rightChildIndex] > _arr[maxIndex])// 有右孩子，且右孩子较大\r\n            maxIndex = rightChildIndex;\r\n        if (maxIndex != _index) {// 交换大孩子到上面\r\n            Tool.swap(_arr, maxIndex, _index);\r\n            heapfy(_arr, maxIndex, _lastIndex);// 向下建堆\r\n        }\r\n    }\r\n}', '排序', 'java', 61),
	(118, '计数排序', 'erhu', '2011-04-24 23:57:24', '2011-05-03 17:43:39', 'package algorithm.sort;\r\n\r\nimport junit.framework.TestCase;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 计数排序\r\n * 1、基本概念、如果被指定排序N个元素，并用每个元素的值的范围为[0, K)，K比N小很多，这时可以得到一个线性的\r\n * 排序算法。\r\n * 2、原理、第一遍处理输入的N个元素，增加桶计数；第二遍处理桶中得到全序计数值，重写原始数列。\r\n * 3、时间复杂度：O(n);\r\n */\r\npublic class CountingSort extends TestCase {\r\n    /**\r\n     * 测试方法\r\n     */\r\n    public void testCountingSort() {\r\n        int[] arr = {2, 4, 5, 2, 3, 14, 9, 18, 24, 93, 98, 34, 23, 89, 93, 45, 23, 45, 32, 12, 8, 78, 34, 4, 32, 35, 78,\r\n                49, 12, 32, 12, 34, 43, 32, 8, 32, 84, 12, 12, 10, 4, 3, 4, 56, 43, 32, 34, 32, 45, 67, 31, 13, 34, 56,\r\n                21, 90, 89, 21, 9, 45, 46, 57};\r\n        countingSort(arr, 100);\r\n        System.out.println(Arrays.toString(arr));\r\n    }\r\n\r\n    /**\r\n     * 排序_arr中的元素，最大值为_max,适用于_arr长度大于_max的情况\r\n     *\r\n     * @param _arr 源数组\r\n     * @param _max 数组中的最大值\r\n     */\r\n    public void countingSort(int[] _arr, int _max) {\r\n        int[] apple = new int[_max];\r\n        // 标记每个元素出现的次数\r\n        for (int i = 0; i < _arr.length; i++)\r\n            apple[_arr[i]]++;\r\n        // 从apple中取出元素\r\n        int index = 0;\r\n        for (int i = 0; i < _max; i++)\r\n            while (apple[i]-- > 0)\r\n                _arr[index++] = i;\r\n    }\r\n}', '排序', 'java', 10),
	(119, '快速排序', 'erhu', '2011-04-24 23:58:35', '2011-05-06 09:08:14', 'package algorithm.sort;\r\n\r\nimport basic.util.Tool;\r\nimport junit.framework.TestCase;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 优化后的快速排序\r\n * 时间复杂度：O(nlg(n))\r\n * 优化技巧：\r\n * 1、待排序元素个数小于等于4时使用插入排序，可提升20%-25%的性能；\r\n * 2、首先将大的子数组压入栈中，以最小化栈的总大小；\r\n * 3、选择基于3中值分区的中枢值，可提升5%的性能；\r\n */\r\npublic class QuickSort extends TestCase {\r\n\r\n    public void testQuickSort() {\r\n        int[] _arr = {1, 42, 221, 3, 45, 32, 1243, 39, 21};\r\n        quickSort(_arr, 0, _arr.length - 1);\r\n        System.out.println(Arrays.toString(_arr));\r\n    }\r\n\r\n    /**\r\n     * do quickSort\r\n     *\r\n     * @param _arr   life is good(-:\r\n     * @param _left  left index(:\r\n     * @param _right right index:-)\r\n     */\r\n    public void quickSort(int[] _arr, int _left, int _right) {\r\n        if (_left < _right) {\r\n            if (4 >= _right - _left)// 对小于5个元素的集合执行插入排序\r\n                insertSort(_arr, _left, _right);\r\n            else {\r\n                int pivot_idx = partition(_arr, _left, _right);// 选择中轴索引\r\n                // 先将大的子数组压入栈\r\n                if ((pivot_idx - 1) - _left > _right - (pivot_idx + 1)) {\r\n                    quickSort(_arr, _left, pivot_idx - 1);\r\n                    quickSort(_arr, pivot_idx + 1, _right);\r\n                } else {\r\n                    quickSort(_arr, pivot_idx + 1, _right);\r\n                    quickSort(_arr, _left, pivot_idx - 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 切分数组，以中枢为界，左小右大\r\n     *\r\n     * @param _arr\r\n     * @param _left\r\n     * @param _right\r\n     * @return 返回中轴的位置\r\n     */\r\n    public int partition(int[] _arr, final int _left, final int _right) {\r\n        int pivot_idx = selectPivotIdx(_arr, _left, _right);// 选择中轴元素\r\n        int pivot = _arr[pivot_idx];\r\n\r\n        Tool.swap(_arr, pivot_idx, _right);// 将中轴元素与最右边元素交换\r\n        int store = _left; // [left, store)范围存储当前小值元素\r\n\r\n        // 遍历区间[_left, _right)，将小于中轴的元素前移\r\n        for (int idx = _left; idx < _right; idx++) {\r\n            if (_arr[idx] < pivot)\r\n                Tool.swap(_arr, idx, store++);// 交换小值元素到store前面\r\n        }\r\n        Tool.swap(_arr, _right, store);// 将中值元素移到正确位置\r\n        return store;\r\n    }\r\n\r\n    /**\r\n     * 选择中枢元素:使用三者取中法\r\n     *\r\n     * @param _arr   god bless me(:\r\n     * @param _left  god bless China:)\r\n     * @param _right god like!:-)\r\n     * @return 中枢元素值\r\n     */\r\n    public int selectPivotIdx(int[] _arr, int _left, int _right) {\r\n        int idx = _left;\r\n        //随机取3个元素，选择它们的中值\r\n        if (_right - _left > 3) {\r\n            int idx_1 = _left + (int) (Math.random() * (_right - _left));\r\n            int idx_2 = _left + (int) (Math.random() * (_right - _left));\r\n            int idx_3 = _left + (int) (Math.random() * (_right - _left));\r\n            if (_arr[idx_1] >= _arr[idx_2] && _arr[idx_3] >= _arr[idx_1])\r\n                idx = idx_1;\r\n            else if (_arr[idx_2] >= _arr[idx_1] && _arr[idx_3] >= _arr[idx_2])\r\n                idx = idx_2;\r\n            else\r\n                idx = idx_3;\r\n        }\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * 插入排序\r\n     *\r\n     * @param _arr   life is good:-)\r\n     * @param _left  life is very good:)\r\n     * @param _right life is cute(:\r\n     */\r\n    public void insertSort(int[] _arr, int _left, int _right) {\r\n        for (int i = _left + 1; _right >= i; i++) {// 从1号开始，对每个元素执行一次插入操作\r\n            int idx = i - 1;\r\n            int value = _arr[i];// 将当前元素存在起来\r\n            // 遍历当前元素之前的元素，直到找到一个小于等于当前元素的值,否则后移被比较的元素\r\n            while (idx >= _left && _arr[idx] > value)\r\n                _arr[idx + 1] = _arr[idx--];\r\n            _arr[idx + 1] = value;// 将当前元素放于正确的位置\r\n        }\r\n    }\r\n}', '排序', 'java', 28);
/*!40000 ALTER TABLE `code` ENABLE KEYS */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
